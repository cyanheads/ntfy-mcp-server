diff --git a/diff.tmp b/diff.tmp
index d025674..e69de29 100644
--- a/diff.tmp
+++ b/diff.tmp
@@ -1,4099 +0,0 @@
-diff --git a/.clinerules b/.clinerules
-deleted file mode 100644
-index 98b6467..0000000
---- a/.clinerules
-+++ /dev/null
-@@ -1,450 +0,0 @@
--# MCP-TS-TEMPLATE DEVELOPER CHEAT SHEET
--
--# ntfy-mcp-server - Directory Structure
--
--Generated on: 2025-03-21 10:39:58
--
--```
--ntfy-mcp-server
--‚îú‚îÄ‚îÄ docs
--    ‚îî‚îÄ‚îÄ tree.md
--‚îú‚îÄ‚îÄ logs
--‚îú‚îÄ‚îÄ scripts
--    ‚îú‚îÄ‚îÄ clean.ts
--    ‚îî‚îÄ‚îÄ tree.ts
--‚îú‚îÄ‚îÄ src
--    ‚îú‚îÄ‚îÄ config
--    ‚îÇ   ‚îú‚îÄ‚îÄ envConfig.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îî‚îÄ‚îÄ mcpConfig.ts
--    ‚îú‚îÄ‚îÄ mcp-server
--    ‚îÇ   ‚îú‚îÄ‚îÄ resources
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ echoResource
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ getEchoMessage.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ tools
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ntfyTool
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ntfyMessage.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ utils
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ registrationHelper.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ README.md
--    ‚îÇ   ‚îî‚îÄ‚îÄ server.ts
--    ‚îú‚îÄ‚îÄ services
--    ‚îÇ   ‚îî‚îÄ‚îÄ ntfy
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ errors.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ publisher.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ subscriber.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.ts
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.ts
--    ‚îú‚îÄ‚îÄ types-global
--    ‚îÇ   ‚îú‚îÄ‚îÄ errors.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ mcp.ts
--    ‚îÇ   ‚îî‚îÄ‚îÄ tool.ts
--    ‚îú‚îÄ‚îÄ utils
--    ‚îÇ   ‚îú‚îÄ‚îÄ errorHandler.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ idGenerator.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ logger.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ rateLimiter.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ requestContext.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ sanitization.ts
--    ‚îÇ   ‚îî‚îÄ‚îÄ security.ts
--    ‚îî‚îÄ‚îÄ index.ts
--‚îú‚îÄ‚îÄ .clinerules
--‚îú‚îÄ‚îÄ .clinerules-code
--‚îú‚îÄ‚îÄ .env.example
--‚îú‚îÄ‚îÄ LICENSE
--‚îú‚îÄ‚îÄ package-lock.json
--‚îú‚îÄ‚îÄ package.json
--‚îú‚îÄ‚îÄ README.md
--‚îú‚îÄ‚îÄ tsconfig.json
--‚îî‚îÄ‚îÄ tsconfig.scripts.json
--
--```
--
--_Note: This tree excludes files and directories matched by .gitignore and common patterns like node_modules._
--
--## üöÄ Quick Start Commands
--
--```bash
--npm run build      # Compile TypeScript to JavaScript
--npm run clean      # Clean build artifacts
--npm run rebuild    # Clean and rebuild project
--npm run tree       # Generate directory tree
--npm run start      # Start the MCP server
--```
--
--## üõ†Ô∏è Server Setup & Lifecycle
--
--### Main Entry Point (src/index.ts)
--
--```typescript
--// Start the server and spawn MCP subservers
--import { createMcpServer } from "./mcp-server/server.js";
--
--// Main startup function
--const start = async () => {
--  // Create startup context
--  const startupContext = createRequestContext({
--    operation: "ServerStartup",
--    appName: "mcp-ts-template",
--    environment: envConfig().environment,
--  });
--
--  // Spawn MCP servers
--  const mcpShutdownFn = await spawnMcpServers();
--
--  // Create main server
--  const server = await createMcpServer();
--
--  // Register signal handlers
--  process.on("SIGTERM", () => shutdown("SIGTERM"));
--  process.on("SIGINT", () => shutdown("SIGINT"));
--};
--
--// Start the application
--start();
--```
--
--### Server Creation (src/mcp-server/server.ts)
--
--```typescript
--// Create a new MCP server with tools and resources
--export const createMcpServer = async () => {
--  // Load package info
--  const packageInfo = await loadPackageInfo();
--
--  // Create server instance
--  const server = new McpServer({
--    name: packageInfo.name,
--    version: packageInfo.version,
--  });
--
--  // Register tools and resources in parallel
--  await Promise.allSettled([
--    registerEchoTool(server),
--    registerEchoResource(server),
--  ]);
--
--  // Connect using stdio transport
--  await server.connect(new StdioServerTransport());
--
--  return server;
--};
--```
--
--## üß© Creating MCP Components
--
--### Resource Registration (src/mcp-server/resources/echoResource/index.ts)
--
--```typescript
--// Register an echo resource that responds to URIs like "echo://hello"
--export const registerEchoResource = async (
--  server: McpServer
--): Promise<void> => {
--  return registerResource(
--    server,
--    { name: "echo-resource" },
--    async (server, resourceLogger: ChildLogger) => {
--      // Create resource template
--      const template = new ResourceTemplate("echo://{message}", {
--        list: async () => ({
--          resources: [
--            {
--              uri: "echo://hello",
--              name: "Default Echo Message",
--              description: "A simple echo resource example",
--            },
--          ],
--        }),
--        complete: {},
--      });
--
--      // Register with full configuration
--      server.resource(
--        "echo-resource",
--        template,
--        {
--          name: "Echo Message",
--          description: "A simple echo resource that returns a message",
--          mimeType: "application/json",
--          querySchema: z.object({
--            /*...*/
--          }),
--          examples: [
--            /*...*/
--          ],
--        },
--        async (uri, params) => {
--          // Resource handler implementation
--          return await ErrorHandler.tryCatch(/*...*/);
--        }
--      );
--    }
--  );
--};
--```
--
--### Tool Registration (src/mcp-server/tools/echoTool/index.ts)
--
--```typescript
--// Register an echo tool that processes and formats messages
--export const registerEchoTool = async (server: McpServer): Promise<void> => {
--  return registerTool(
--    server,
--    { name: "echo_message" },
--    async (server, toolLogger: ChildLogger) => {
--      // Register the tool with simplified SDK pattern
--      server.tool(
--        "echo_message",
--        {
--          message: z
--            .string()
--            .min(1)
--            .max(1000)
--            .describe("The message to echo back (1-1000 characters)"),
--          mode: z
--            .enum(ECHO_MODES)
--            .optional()
--            .default("standard")
--            .describe(
--              "How to format the echoed message: standard (as-is), uppercase, or lowercase"
--            ),
--          repeat: z.number().int().min(1).max(10).optional().default(1),
--          timestamp: z.boolean().optional().default(true),
--        },
--        async (params) => {
--          return await ErrorHandler.tryCatch(
--            async () => {
--              const response = processEchoMessage(params);
--              return {
--                content: [
--                  { type: "text", text: JSON.stringify(response, null, 2) },
--                ],
--              };
--            },
--            {
--              /* error handling options */
--            }
--          );
--        }
--      );
--    }
--  );
--};
--```
--
--### Registration Helper (src/mcp-server/utils/registrationHelper.ts)
--
--```typescript
--// Use these helpers for consistent registration pattern
--import { registerTool } from "../../utils/registrationHelper.js";
--import { registerResource } from "../../utils/registrationHelper.js";
--
--// Example usage:
--registerTool(server, { name: "your_tool_name" }, async (server, logger) => {
--  // Tool registration logic
--});
--```
--
--## üîí Error Handling
--
--### Using ErrorHandler (src/utils/errorHandler.ts)
--
--```typescript
--import { ErrorHandler } from "./utils/errorHandler.js";
--
--// Try/catch pattern
--const result = await ErrorHandler.tryCatch(
--  async () => {
--    // Operation that might fail
--    return await someAsyncOperation();
--  },
--  {
--    operation: "operation name",
--    context: { additionalContext: "value" },
--    input: { param1: "value1" },
--    errorCode: BaseErrorCode.INTERNAL_ERROR,
--    errorMapper: (error) =>
--      new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        `Custom error message: ${
--          error instanceof Error ? error.message : "Unknown error"
--        }`
--      ),
--  }
--);
--
--// If result instanceof Error, handle the error
--```
--
--### Custom Errors (src/types-global/errors.ts)
--
--```typescript
--import { BaseErrorCode, McpError } from "./types-global/errors.js";
--
--throw new McpError(BaseErrorCode.INVALID_REQUEST, "Error message");
--```
--
--## ‚öôÔ∏è Configuration
--
--### Environment Config (src/config/envConfig.ts)
--
--```typescript
--import { envConfig } from "./config/envConfig.js";
--
--// Access environment variables
--const environment = envConfig().environment;
--const logLevel = envConfig().logLevel;
--const rateLimitSettings = {
--  windowMs: envConfig().rateLimit.windowMs || 60000,
--  maxRequests: envConfig().rateLimit.maxRequests || 100,
--};
--```
--
--### MCP Server Config (src/config/mcpConfig.ts)
--
--```typescript
--import { enabledMcpServers } from "./config/mcpConfig.js";
--
--// Get configured MCP servers
--const mcpServers = enabledMcpServers();
--```
--
--## üìù Logging
--
--### Using Logger (src/utils/logger.ts)
--
--```typescript
--import { logger } from "./utils/logger.js";
--
--// Basic logging
--logger.info("Information message", { context: "value" });
--logger.error("Error message", { error: errorObj });
--
--// Child loggers for components
--const serverLogger = logger.createChildLogger({
--  service: "MCPServer",
--  serverId: idGenerator.generateRandomString(8),
--  environment: envConfig().environment,
--});
--
--// Component-specific logger
--const toolLogger = logger.createChildLogger({
--  module: "EchoTool",
--  operation: "registration",
--});
--
--toolLogger.debug("Debug message");
--```
--
--## üõ°Ô∏è Security
--
--### Input Sanitization (src/utils/security.ts)
--
--```typescript
--import { sanitizeInput } from "./utils/security.js";
--
--// Sanitize user inputs
--const safeName = sanitizeInput.string(name);
--const safePath = sanitizeInput.path(pkgPath);
--const safeHtml = sanitizeInput.html(userHtml);
--```
--
--### Request Context (src/utils/requestContext.ts)
--
--```typescript
--import { createRequestContext } from "./utils/security.js";
--
--// Create context for operation tracking
--const context = createRequestContext({
--  operation: "OperationName",
--  userId: "user-id",
--});
--```
--
--## üîÑ Process Management
--
--### Spawning MCP Servers (src/index.ts)
--
--```typescript
--// Load configured MCP servers
--const mcpServers = enabledMcpServers();
--
--// Spawn child processes
--const childProc = spawn(serverConfig.command, serverConfig.args, {
--  env: { ...process.env, ...serverConfig.env },
--  stdio: ["pipe", "pipe", "pipe"],
--});
--
--// Handle process events
--childProc.stdout?.on("data", (data: Buffer) => {
--  const output = data.toString().trim();
--  if (output) {
--    processLogger.debug(`stdout:`, { output: output.substring(0, 500) });
--  }
--});
--
--childProc.on("exit", (code: number | null, signal: string | null) => {
--  // Handle process exit
--});
--```
--
--### Graceful Shutdown (src/index.ts)
--
--```typescript
--// Register signal handlers
--process.on("SIGTERM", () => shutdown("SIGTERM"));
--process.on("SIGINT", () => shutdown("SIGINT"));
--
--// Implement shutdown function
--const shutdown = async (signal: string) => {
--  // Close MCP servers
--  if (mcpServerProcesses.size > 0) {
--    await shutdownMcpServers();
--  }
--
--  // Close main server
--  if (server) {
--    await server.close();
--  }
--
--  process.exit(0);
--};
--```
--
--## üß© MCP SDK Integration
--
--### SDK Dependencies (package.json)
--
--- `@modelcontextprotocol/sdk`: Main MCP SDK for server/client implementation
--- Version used: ^1.7.0
--- Key schemas: `ListResourcesRequestSchema`, `ReadResourceRequestSchema`, etc.
--
--### Schema Types (from @modelcontextprotocol/sdk/types.js)
--
--```typescript
--import {
--  CallToolRequestSchema,
--  ListResourcesRequestSchema,
--  ReadResourceRequestSchema,
--} from "@modelcontextprotocol/sdk/types.js";
--```
--
--### Input Validation with Zod
--
--```typescript
--// Define input schema with zod
--{
--  message: z.string().min(1).max(1000).describe(
--    'The message to echo back (1-1000 characters)'
--  ),
--  mode: z.enum(['standard', 'uppercase', 'lowercase']).optional().default('standard')
--}
--```
-diff --git a/.clinerules-code b/.clinerules-code
-deleted file mode 100644
-index cde8c75..0000000
---- a/.clinerules-code
-+++ /dev/null
-@@ -1,452 +0,0 @@
--# MCP-TS-TEMPLATE DEVELOPER CHEAT SHEET
--
--# ntfy-mcp-server - Directory Structure
--
--Generated on: 2025-03-21 10:39:58
--
--
--```
--ntfy-mcp-server
--‚îú‚îÄ‚îÄ docs
--    ‚îî‚îÄ‚îÄ tree.md
--‚îú‚îÄ‚îÄ logs
--‚îú‚îÄ‚îÄ scripts
--    ‚îú‚îÄ‚îÄ clean.ts
--    ‚îî‚îÄ‚îÄ tree.ts
--‚îú‚îÄ‚îÄ src
--    ‚îú‚îÄ‚îÄ config
--    ‚îÇ   ‚îú‚îÄ‚îÄ envConfig.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îî‚îÄ‚îÄ mcpConfig.ts
--    ‚îú‚îÄ‚îÄ mcp-server
--    ‚îÇ   ‚îú‚îÄ‚îÄ resources
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ echoResource
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ getEchoMessage.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ tools
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ntfyTool
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ntfyMessage.ts
--    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ utils
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ registrationHelper.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ README.md
--    ‚îÇ   ‚îî‚îÄ‚îÄ server.ts
--    ‚îú‚îÄ‚îÄ services
--    ‚îÇ   ‚îî‚îÄ‚îÄ ntfy
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ errors.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ publisher.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ subscriber.ts
--    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.ts
--    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.ts
--    ‚îú‚îÄ‚îÄ types-global
--    ‚îÇ   ‚îú‚îÄ‚îÄ errors.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ mcp.ts
--    ‚îÇ   ‚îî‚îÄ‚îÄ tool.ts
--    ‚îú‚îÄ‚îÄ utils
--    ‚îÇ   ‚îú‚îÄ‚îÄ errorHandler.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ idGenerator.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ logger.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ rateLimiter.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ requestContext.ts
--    ‚îÇ   ‚îú‚îÄ‚îÄ sanitization.ts
--    ‚îÇ   ‚îî‚îÄ‚îÄ security.ts
--    ‚îî‚îÄ‚îÄ index.ts
--‚îú‚îÄ‚îÄ .clinerules
--‚îú‚îÄ‚îÄ .clinerules-code
--‚îú‚îÄ‚îÄ .env.example
--‚îú‚îÄ‚îÄ LICENSE
--‚îú‚îÄ‚îÄ package-lock.json
--‚îú‚îÄ‚îÄ package.json
--‚îú‚îÄ‚îÄ README.md
--‚îú‚îÄ‚îÄ tsconfig.json
--‚îî‚îÄ‚îÄ tsconfig.scripts.json
--
--```
--
--_Note: This tree excludes files and directories matched by .gitignore and common patterns like node_modules._
--
--
--## üöÄ Quick Start Commands
--
--```bash
--npm run build      # Compile TypeScript to JavaScript
--npm run clean      # Clean build artifacts
--npm run rebuild    # Clean and rebuild project
--npm run tree       # Generate directory tree
--npm run start      # Start the MCP server
--```
--
--## üõ†Ô∏è Server Setup & Lifecycle
--
--### Main Entry Point (src/index.ts)
--
--```typescript
--// Start the server and spawn MCP subservers
--import { createMcpServer } from "./mcp-server/server.js";
--
--// Main startup function
--const start = async () => {
--  // Create startup context
--  const startupContext = createRequestContext({
--    operation: "ServerStartup",
--    appName: "mcp-ts-template",
--    environment: envConfig().environment,
--  });
--
--  // Spawn MCP servers
--  const mcpShutdownFn = await spawnMcpServers();
--
--  // Create main server
--  const server = await createMcpServer();
--
--  // Register signal handlers
--  process.on("SIGTERM", () => shutdown("SIGTERM"));
--  process.on("SIGINT", () => shutdown("SIGINT"));
--};
--
--// Start the application
--start();
--```
--
--### Server Creation (src/mcp-server/server.ts)
--
--```typescript
--// Create a new MCP server with tools and resources
--export const createMcpServer = async () => {
--  // Load package info
--  const packageInfo = await loadPackageInfo();
--
--  // Create server instance
--  const server = new McpServer({
--    name: packageInfo.name,
--    version: packageInfo.version,
--  });
--
--  // Register tools and resources in parallel
--  await Promise.allSettled([
--    registerEchoTool(server),
--    registerEchoResource(server),
--  ]);
--
--  // Connect using stdio transport
--  await server.connect(new StdioServerTransport());
--
--  return server;
--};
--```
--
--## üß© Creating MCP Components
--
--### Resource Registration (src/mcp-server/resources/echoResource/index.ts)
--
--```typescript
--// Register an echo resource that responds to URIs like "echo://hello"
--export const registerEchoResource = async (
--  server: McpServer
--): Promise<void> => {
--  return registerResource(
--    server,
--    { name: "echo-resource" },
--    async (server, resourceLogger: ChildLogger) => {
--      // Create resource template
--      const template = new ResourceTemplate("echo://{message}", {
--        list: async () => ({
--          resources: [
--            {
--              uri: "echo://hello",
--              name: "Default Echo Message",
--              description: "A simple echo resource example",
--            },
--          ],
--        }),
--        complete: {},
--      });
--
--      // Register with full configuration
--      server.resource(
--        "echo-resource",
--        template,
--        {
--          name: "Echo Message",
--          description: "A simple echo resource that returns a message",
--          mimeType: "application/json",
--          querySchema: z.object({
--            /*...*/
--          }),
--          examples: [
--            /*...*/
--          ],
--        },
--        async (uri, params) => {
--          // Resource handler implementation
--          return await ErrorHandler.tryCatch(/*...*/);
--        }
--      );
--    }
--  );
--};
--```
--
--### Tool Registration (src/mcp-server/tools/echoTool/index.ts)
--
--```typescript
--// Register an echo tool that processes and formats messages
--export const registerEchoTool = async (server: McpServer): Promise<void> => {
--  return registerTool(
--    server,
--    { name: "echo_message" },
--    async (server, toolLogger: ChildLogger) => {
--      // Register the tool with simplified SDK pattern
--      server.tool(
--        "echo_message",
--        {
--          message: z
--            .string()
--            .min(1)
--            .max(1000)
--            .describe("The message to echo back (1-1000 characters)"),
--          mode: z
--            .enum(ECHO_MODES)
--            .optional()
--            .default("standard")
--            .describe(
--              "How to format the echoed message: standard (as-is), uppercase, or lowercase"
--            ),
--          repeat: z.number().int().min(1).max(10).optional().default(1),
--          timestamp: z.boolean().optional().default(true),
--        },
--        async (params) => {
--          return await ErrorHandler.tryCatch(
--            async () => {
--              const response = processEchoMessage(params);
--              return {
--                content: [
--                  { type: "text", text: JSON.stringify(response, null, 2) },
--                ],
--              };
--            },
--            {
--              /* error handling options */
--            }
--          );
--        }
--      );
--    }
--  );
--};
--```
--
--### Registration Helper (src/mcp-server/utils/registrationHelper.ts)
--
--```typescript
--// Use these helpers for consistent registration pattern
--import { registerTool } from "../../utils/registrationHelper.js";
--import { registerResource } from "../../utils/registrationHelper.js";
--
--// Example usage:
--registerTool(server, { name: "your_tool_name" }, async (server, logger) => {
--  // Tool registration logic
--});
--```
--
--## üîí Error Handling
--
--### Using ErrorHandler (src/utils/errorHandler.ts)
--
--```typescript
--import { ErrorHandler } from "./utils/errorHandler.js";
--
--// Try/catch pattern
--const result = await ErrorHandler.tryCatch(
--  async () => {
--    // Operation that might fail
--    return await someAsyncOperation();
--  },
--  {
--    operation: "operation name",
--    context: { additionalContext: "value" },
--    input: { param1: "value1" },
--    errorCode: BaseErrorCode.INTERNAL_ERROR,
--    errorMapper: (error) =>
--      new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        `Custom error message: ${
--          error instanceof Error ? error.message : "Unknown error"
--        }`
--      ),
--  }
--);
--
--// If result instanceof Error, handle the error
--```
--
--### Custom Errors (src/types-global/errors.ts)
--
--```typescript
--import { BaseErrorCode, McpError } from "./types-global/errors.js";
--
--throw new McpError(BaseErrorCode.INVALID_REQUEST, "Error message");
--```
--
--## ‚öôÔ∏è Configuration
--
--### Environment Config (src/config/envConfig.ts)
--
--```typescript
--import { envConfig } from "./config/envConfig.js";
--
--// Access environment variables
--const environment = envConfig().environment;
--const logLevel = envConfig().logLevel;
--const rateLimitSettings = {
--  windowMs: envConfig().rateLimit.windowMs || 60000,
--  maxRequests: envConfig().rateLimit.maxRequests || 100,
--};
--```
--
--### MCP Server Config (src/config/mcpConfig.ts)
--
--```typescript
--import { enabledMcpServers } from "./config/mcpConfig.js";
--
--// Get configured MCP servers
--const mcpServers = enabledMcpServers();
--```
--
--## üìù Logging
--
--### Using Logger (src/utils/logger.ts)
--
--```typescript
--import { logger } from "./utils/logger.js";
--
--// Basic logging
--logger.info("Information message", { context: "value" });
--logger.error("Error message", { error: errorObj });
--
--// Child loggers for components
--const serverLogger = logger.createChildLogger({
--  service: "MCPServer",
--  serverId: idGenerator.generateRandomString(8),
--  environment: envConfig().environment,
--});
--
--// Component-specific logger
--const toolLogger = logger.createChildLogger({
--  module: "EchoTool",
--  operation: "registration",
--});
--
--toolLogger.debug("Debug message");
--```
--
--## üõ°Ô∏è Security
--
--### Input Sanitization (src/utils/security.ts)
--
--```typescript
--import { sanitizeInput } from "./utils/security.js";
--
--// Sanitize user inputs
--const safeName = sanitizeInput.string(name);
--const safePath = sanitizeInput.path(pkgPath);
--const safeHtml = sanitizeInput.html(userHtml);
--```
--
--### Request Context (src/utils/requestContext.ts)
--
--```typescript
--import { createRequestContext } from "./utils/security.js";
--
--// Create context for operation tracking
--const context = createRequestContext({
--  operation: "OperationName",
--  userId: "user-id",
--});
--```
--
--## üîÑ Process Management
--
--### Spawning MCP Servers (src/index.ts)
--
--```typescript
--// Load configured MCP servers
--const mcpServers = enabledMcpServers();
--
--// Spawn child processes
--const childProc = spawn(serverConfig.command, serverConfig.args, {
--  env: { ...process.env, ...serverConfig.env },
--  stdio: ["pipe", "pipe", "pipe"],
--});
--
--// Handle process events
--childProc.stdout?.on("data", (data: Buffer) => {
--  const output = data.toString().trim();
--  if (output) {
--    processLogger.debug(`stdout:`, { output: output.substring(0, 500) });
--  }
--});
--
--childProc.on("exit", (code: number | null, signal: string | null) => {
--  // Handle process exit
--});
--```
--
--### Graceful Shutdown (src/index.ts)
--
--```typescript
--// Register signal handlers
--process.on("SIGTERM", () => shutdown("SIGTERM"));
--process.on("SIGINT", () => shutdown("SIGINT"));
--
--// Implement shutdown function
--const shutdown = async (signal: string) => {
--  // Close MCP servers
--  if (mcpServerProcesses.size > 0) {
--    await shutdownMcpServers();
--  }
--
--  // Close main server
--  if (server) {
--    await server.close();
--  }
--
--  process.exit(0);
--};
--```
--
--## üß© MCP SDK Integration
--
--### SDK Dependencies (package.json)
--
--- `@modelcontextprotocol/sdk`: Main MCP SDK for server/client implementation
--- Version used: ^1.7.0
--- Key schemas: `ListResourcesRequestSchema`, `ReadResourceRequestSchema`, etc.
--
--### Schema Types (from @modelcontextprotocol/sdk/types.js)
--
--```typescript
--import {
--  CallToolRequestSchema,
--  ListResourcesRequestSchema,
--  ReadResourceRequestSchema,
--} from "@modelcontextprotocol/sdk/types.js";
--```
--
--### Input Validation with Zod
--
--```typescript
--// Define input schema with zod
--{
--  message: z.string().min(1).max(1000).describe(
--    'The message to echo back (1-1000 characters)'
--  ),
--  mode: z.enum(['standard', 'uppercase', 'lowercase']).optional().default('standard')
--}
--```
-diff --git a/.env.example b/.env.example
-index 79ee738..b56b882 100644
---- a/.env.example
-+++ b/.env.example
-@@ -2,17 +2,16 @@
- 
- # General server settings
- NODE_ENV=development
--LOG_LEVEL=info
--LOG_FILE_DIR=/path/to/your/logs
-+LOG_LEVEL=debug
-+LOG_FILE_DIR=/path/to/logs
- 
- # Rate limiting
- RATE_LIMIT_WINDOW_MS=60000
- RATE_LIMIT_MAX_REQUESTS=100
- 
- # Ntfy configuration
--NTFY_API_KEY=your-ntfy-api-key
-+NTFY_API_KEY=your_api_key_here
- NTFY_BASE_URL=https://ntfy.sh
--NTFY_TOPIC=ATLAS # or any other topic you want to use
--NTFY_REQUEST_TIMEOUT=5000
-+NTFY_DEFAULT_TOPIC=ATLAS
- NTFY_MAX_RETRIES=3
- NTFY_MAX_MESSAGE_SIZE=4096
-\ No newline at end of file
-diff --git a/.gitignore b/.gitignore
-index bc7fb7b..586e842 100644
---- a/.gitignore
-+++ b/.gitignore
-@@ -1,61 +1,9 @@
--# Operating System Files
--.DS_Store
--.DS_Store?
--._*
--.Spotlight-V100
--.Trashes
--ehthumbs.db
--Thumbs.db
--
--# IDE and Editor Files
--.idea/
--.vscode/
--*.swp
--*.swo
--*~
--*.sublime-workspace
--*.sublime-project
--
--# TypeScript
--*.tsbuildinfo
--.tscache/
--*.js.map
--*.tgz
--.npm
--.eslintcache
--.rollup.cache
--*.mjs.map
--*.cjs.map
--*.d.ts.map
--*.d.ts
--!*.d.ts.template
--.pnp.js
--.pnp.cjs
--.pnp.mjs
--.pnp.json
--.pnp.ts
--
--# Demo and Example Directories
--demo/
--demos/
--example/
--examples/
--samples/
--.sample-env
--sample.*
--!sample.template.*
--
--# Node.js
--node_modules/
--npm-debug.log*
--yarn-debug.log*
--yarn-error.log*
--.pnpm-debug.log*
-+# Environment and secrets
- .env
--.env.local
--.env.development.local
--.env.test.local
--.env.production.local
-+.env.*
-+!.env.example
-+.venv/
-+.venv3/
- 
- # Python
- __pycache__/
-@@ -78,89 +26,57 @@ wheels/
- *.egg-info/
- .installed.cfg
- *.egg
--.pytest_cache/
--.coverage
--htmlcov/
--.tox/
--.venv
-+MANIFEST
-+.python-version
- venv/
-+env/
- ENV/
- 
--# Java
--*.class
--*.log
--*.jar
--*.war
--*.nar
--*.ear
--*.zip
--*.tar.gz
--*.rar
--hs_err_pid*
--target/
--.gradle/
--build/
--
--# Ruby
--*.gem
--*.rbc
--/.config
--/coverage/
--/InstalledFiles
--/pkg/
--/spec/reports/
--/spec/examples.txt
--/test/tmp/
--/test/version_tmp/
--/tmp/
--.byebug_history
--
--# Compiled Files
--*.com
--*.class
--*.dll
--*.exe
--*.o
--*.so
-+# IDE
-+.idea/
-+.vscode/
-+*.swp
-+*.swo
-+.DS_Store
- 
--# Package Files
--*.7z
--*.dmg
--*.gz
--*.iso
--*.rar
--*.tar
--*.zip
-+# Project specific
-+logs/
-+output/
-+data/*
-+!data/.gitkeep
- 
--# Logs and Databases
-+# LaTeX
-+*.aux
-+*.lof
- *.log
--*.sql
--*.sqlite
--*.sqlite3
--
--# Build and Distribution
--dist/
--build/
--out/
--
--# Testing
--coverage/
--.nyc_output/
--
--# Cache
--.cache/
--.parcel-cache/
-+*.lot
-+*.fls
-+*.out
-+*.toc
-+*.fmt
-+*.fot
-+*.cb
-+*.cb2
-+.*.lb
-+*.dvi
-+*.xdv
-+*-converted-to.*
-+*.pdf
-+*.fdb_latexmk
-+*.synctex
-+*.synctex(busy)
-+*.synctex.gz
-+*.synctex.gz(busy)
-+*.pdfsync
-+latex.out/
-+node_modules/
- 
- # Misc
--.DS_Store
--.env.local
--.env.development.local
--.env.test.local
--.env.production.local
--*.bak
--*.swp
--*.swo
--*~
--.history/
--*repomix*
--mcp-servers.json
-+repomix/
-+repomix-output.txt
-+repomix-output.xml
-+repomix-output.json
-+logs/
-+ideas/
-+backups/
-+atlas-backups/
-\ No newline at end of file
-diff --git a/package-lock.json b/package-lock.json
-index 4f5d178..b29d06b 100644
---- a/package-lock.json
-+++ b/package-lock.json
-@@ -1,19 +1,20 @@
- {
--  "name": "mcp-ts-template",
-+  "name": "ntfy-mcp-server",
-   "version": "1.0.0",
-   "lockfileVersion": 3,
-   "requires": true,
-   "packages": {
-     "": {
--      "name": "mcp-ts-template",
-+      "name": "ntfy-mcp-server",
-       "version": "1.0.0",
-       "license": "Apache-2.0",
-       "dependencies": {
--        "@modelcontextprotocol/sdk": "^1.7.0",
--        "@types/node": "^22.13.13",
-+        "@modelcontextprotocol/sdk": "^1.8.0",
-+        "@types/node": "^22.13.14",
-         "@types/sanitize-html": "^2.13.0",
--        "@types/validator": "^13.12.2",
-+        "@types/validator": "^13.12.3",
-         "@types/xss-filters": "^1.2.0",
-+        "dotenv": "^16.4.7",
-         "path-normalize": "^6.0.13",
-         "sanitize-html": "^2.15.0",
-         "ts-node": "^10.9.2",
-@@ -83,13 +84,14 @@
-       }
-     },
-     "node_modules/@modelcontextprotocol/sdk": {
--      "version": "1.7.0",
--      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.7.0.tgz",
--      "integrity": "sha512-IYPe/FLpvF3IZrd/f5p5ffmWhMc3aEMuM2wGJASDqC2Ge7qatVCdbfPx3n/5xFeb19xN0j/911M2AaFuircsWA==",
-+      "version": "1.8.0",
-+      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.8.0.tgz",
-+      "integrity": "sha512-e06W7SwrontJDHwCawNO5SGxG+nU9AAx+jpHHZqGl/WrDBdWOpvirC+s58VpJTB5QemI4jTRcjWT4Pt3Q1NPQQ==",
-       "license": "MIT",
-       "dependencies": {
-         "content-type": "^1.0.5",
-         "cors": "^2.8.5",
-+        "cross-spawn": "^7.0.3",
-         "eventsource": "^3.0.2",
-         "express": "^5.0.1",
-         "express-rate-limit": "^7.5.0",
-@@ -127,9 +129,9 @@
-       "license": "MIT"
-     },
-     "node_modules/@types/node": {
--      "version": "22.13.13",
--      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.13.tgz",
--      "integrity": "sha512-ClsL5nMwKaBRwPcCvH8E7+nU4GxHVx1axNvMZTFHMEfNI7oahimt26P5zjVCRrjiIWj6YFXfE1v3dEp94wLcGQ==",
-+      "version": "22.13.14",
-+      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.14.tgz",
-+      "integrity": "sha512-Zs/Ollc1SJ8nKUAgc7ivOEdIBM8JAKgrqqUYi2J997JuKO7/tpQC+WCetQ1sypiKCQWHdvdg9wBNpUPEWZae7w==",
-       "license": "MIT",
-       "dependencies": {
-         "undici-types": "~6.20.0"
-@@ -157,9 +159,9 @@
-       "license": "MIT"
-     },
-     "node_modules/@types/validator": {
--      "version": "13.12.2",
--      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.12.2.tgz",
--      "integrity": "sha512-6SlHBzUW8Jhf3liqrGGXyTJSIFe4nqlJ5A5KaMZ2l/vbM3Wh3KSybots/wfWVzNLK4D1NZluDlSQIbIEPx6oyA==",
-+      "version": "13.12.3",
-+      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.12.3.tgz",
-+      "integrity": "sha512-2ipwZ2NydGQJImne+FhNdhgRM37e9lCev99KnqkbFHd94Xn/mErARWI1RSLem1QA19ch5kOhzIZd7e8CA2FI8g==",
-       "license": "MIT"
-     },
-     "node_modules/@types/xss-filters": {
-@@ -416,6 +418,20 @@
-       "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
-       "license": "MIT"
-     },
-+    "node_modules/cross-spawn": {
-+      "version": "7.0.6",
-+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
-+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
-+      "license": "MIT",
-+      "dependencies": {
-+        "path-key": "^3.1.0",
-+        "shebang-command": "^2.0.0",
-+        "which": "^2.0.1"
-+      },
-+      "engines": {
-+        "node": ">= 8"
-+      }
-+    },
-     "node_modules/debug": {
-       "version": "4.3.6",
-       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
-@@ -525,6 +541,18 @@
-         "url": "https://github.com/fb55/domutils?sponsor=1"
-       }
-     },
-+    "node_modules/dotenv": {
-+      "version": "16.4.7",
-+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
-+      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
-+      "license": "BSD-2-Clause",
-+      "engines": {
-+        "node": ">=12"
-+      },
-+      "funding": {
-+        "url": "https://dotenvx.com"
-+      }
-+    },
-     "node_modules/dunder-proto": {
-       "version": "1.0.1",
-       "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
-@@ -964,6 +992,12 @@
-         "url": "https://github.com/sponsors/sindresorhus"
-       }
-     },
-+    "node_modules/isexe": {
-+      "version": "2.0.0",
-+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
-+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
-+      "license": "ISC"
-+    },
-     "node_modules/kuler": {
-       "version": "2.0.0",
-       "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
-@@ -1170,6 +1204,15 @@
-         "node": ">= 0.8"
-       }
-     },
-+    "node_modules/path-key": {
-+      "version": "3.1.1",
-+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-     "node_modules/path-normalize": {
-       "version": "6.0.13",
-       "resolved": "https://registry.npmjs.org/path-normalize/-/path-normalize-6.0.13.tgz",
-@@ -1452,6 +1495,27 @@
-       "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
-       "license": "ISC"
-     },
-+    "node_modules/shebang-command": {
-+      "version": "2.0.0",
-+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-+      "license": "MIT",
-+      "dependencies": {
-+        "shebang-regex": "^3.0.0"
-+      },
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-+    "node_modules/shebang-regex": {
-+      "version": "3.0.0",
-+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-     "node_modules/side-channel": {
-       "version": "1.1.0",
-       "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
-@@ -1717,6 +1781,21 @@
-         "node": ">= 0.8"
-       }
-     },
-+    "node_modules/which": {
-+      "version": "2.0.2",
-+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-+      "license": "ISC",
-+      "dependencies": {
-+        "isexe": "^2.0.0"
-+      },
-+      "bin": {
-+        "node-which": "bin/node-which"
-+      },
-+      "engines": {
-+        "node": ">= 8"
-+      }
-+    },
-     "node_modules/winston": {
-       "version": "3.17.0",
-       "resolved": "https://registry.npmjs.org/winston/-/winston-3.17.0.tgz",
-diff --git a/package.json b/package.json
-index 8dd2d95..d9fdd19 100644
---- a/package.json
-+++ b/package.json
-@@ -1,8 +1,9 @@
- {
--  "name": "mcp-ts-template",
-+  "name": "ntfy-mcp-server",
-   "version": "1.0.0",
-   "description": "A beginner-friendly foundation for building Model Context Protocol (MCP) servers (and in the future also clients) with TypeScript. This template provides a comprehensive starting point with production-ready utilities, well-structured code, and working examples for building an MCP server. Copy this repo to kickstart your own MCP server and set your **vibe code** session up for success!",
--  "main": "dist/src/index.js",
-+  "main": "dist/index.js",
-+  "type": "module",
-   "files": [
-     "dist"
-   ],
-@@ -11,11 +12,16 @@
-     "clean": "ts-node scripts/clean.ts",
-     "rebuild": "npm run clean && npm run build",
-     "tree": "ts-node scripts/tree.ts",
--    "start": "ts-node dist/src/index.js"
-+    "start": "node dist/index.js",
-+    "watch": "tail -f logs/combined.log"
-   },
-   "dependencies": {
--    "@modelcontextprotocol/sdk": "^1.7.0",
--    "@types/node": "^22.13.13",
-+    "@modelcontextprotocol/sdk": "^1.8.0",
-+    "@types/node": "^22.13.14",
-+    "@types/sanitize-html": "^2.13.0",
-+    "@types/validator": "^13.12.3",
-+    "@types/xss-filters": "^1.2.0",
-+    "dotenv": "^16.4.7",
-     "path-normalize": "^6.0.13",
-     "sanitize-html": "^2.15.0",
-     "ts-node": "^10.9.2",
-@@ -24,10 +30,7 @@
-     "validator": "^13.15.0",
-     "winston": "^3.17.0",
-     "winston-daily-rotate-file": "^5.0.0",
--    "xss-filters": "^1.2.7",
--    "@types/sanitize-html": "^2.13.0",
--    "@types/validator": "^13.12.2",
--    "@types/xss-filters": "^1.2.0"
-+    "xss-filters": "^1.2.7"
-   },
-   "keywords": [
-     "typescript",
-diff --git a/scripts/clean.ts b/scripts/clean.ts
-index 4b38d5b..16ed738 100644
---- a/scripts/clean.ts
-+++ b/scripts/clean.ts
-@@ -36,23 +36,27 @@ import { join } from 'path';
- /**
-  * Standardized error category classification
-  */
--enum ErrorCategoryType {
--  CATEGORY_VALIDATION = 'VALIDATION',
--  CATEGORY_FILESYSTEM = 'FILESYSTEM',
--  CATEGORY_SYSTEM = 'SYSTEM',
--  CATEGORY_UNKNOWN = 'UNKNOWN'
--}
-+const ErrorCategoryType = {
-+  CATEGORY_VALIDATION: 'VALIDATION',
-+  CATEGORY_FILESYSTEM: 'FILESYSTEM',
-+  CATEGORY_SYSTEM: 'SYSTEM',
-+  CATEGORY_UNKNOWN: 'UNKNOWN'
-+} as const;
-+
-+type ErrorCategoryType = typeof ErrorCategoryType[keyof typeof ErrorCategoryType];
- 
- /**
-  * Error severity classification
-  */
--enum ErrorSeverityLevel {
--  SEVERITY_DEBUG = 0,
--  SEVERITY_INFO = 1,
--  SEVERITY_WARN = 2,
--  SEVERITY_ERROR = 3,
--  SEVERITY_FATAL = 4
--}
-+const ErrorSeverityLevel = {
-+  SEVERITY_DEBUG: 0,
-+  SEVERITY_INFO: 1,
-+  SEVERITY_WARN: 2,
-+  SEVERITY_ERROR: 3,
-+  SEVERITY_FATAL: 4
-+} as const;
-+
-+type ErrorSeverityLevel = typeof ErrorSeverityLevel[keyof typeof ErrorSeverityLevel];
- 
- /**
-  * Standardized error structure for consistent error handling
-@@ -374,4 +378,4 @@ async function cleanProjectDirectories(): Promise<void> {
- // -----------------------------------
- 
- // Execute the main operation function
--cleanProjectDirectories();
-\ No newline at end of file
-+cleanProjectDirectories();
-diff --git a/src/config/envConfig.ts b/src/config/envConfig.ts
-deleted file mode 100644
-index e52f5a9..0000000
---- a/src/config/envConfig.ts
-+++ /dev/null
-@@ -1,143 +0,0 @@
--/**
-- * Environment configuration module
-- * 
-- * Loads and validates environment variables with proper defaults
-- * and type conversion. Uses a lazy-loading pattern to avoid
-- * loading configuration at import time.
-- */
--import { logger } from '../utils/logger.js';
--import { parseNumericEnv, parseBooleanEnv, parseStringEnv, validators } from './parsers.js';
--
--// Create a module-level logger for environment configuration
--const envLogger = logger.createChildLogger({
--  module: 'EnvConfig'
--});
--
--/**
-- * Environment Configuration Interface
-- */
--export interface EnvironmentConfig {
--  // Server configuration
--  logLevel: string;
--  environment: string;
--  
--  // Security settings
--  security: {
--    // Can be extended with security settings in the future
--  };
--  
--  // Rate limiting
--  rateLimit: {
--    windowMs: number;
--    maxRequests: number;
--  };
--  
--  // Ntfy configuration
--  ntfy: {
--    apiKey: string;
--    baseUrl: string;
--    defaultTopic: string;
--    requestTimeout: number;
--    maxRetries: number;
--    maxMessageSize: number;
--  };
--}
--
--/**
-- * Handles loading and parsing of environment variables for the application
-- * with validation and default values.
-- */
--function loadEnvConfig(): EnvironmentConfig {
--  // Log the environment we're loading
--  envLogger.info(`Loading environment configuration`, {
--    nodeEnv: process.env.NODE_ENV || 'development',
--    logLevel: process.env.LOG_LEVEL || 'info'
--  });
--
--  const config: EnvironmentConfig = {
--    // Server configuration
--    logLevel: process.env.LOG_LEVEL || "info",
--    environment: process.env.NODE_ENV || "development",
--    
--    // Security settings
--    security: {
--      // Can be extended with non-auth security settings in the future
--    },
--    
--    // Rate limiting
--    rateLimit: {
--      windowMs: parseNumericEnv('RATE_LIMIT_WINDOW_MS', 60000, 1000, 3600000), // 1 minute default, 1s min, 1h max
--      maxRequests: parseNumericEnv('RATE_LIMIT_MAX_REQUESTS', 100, 1, 10000) // 100 requests per minute default, 1-10000 range
--    },
--    
--    // Ntfy configuration
--    ntfy: {
--      apiKey: process.env.NTFY_API_KEY || '',
--      baseUrl: parseStringEnv('NTFY_BASE_URL', 'https://ntfy.sh', validators.url),
--      defaultTopic: parseStringEnv('NTFY_TOPIC', '', validators.ntfyTopic),
--      requestTimeout: parseNumericEnv('NTFY_REQUEST_TIMEOUT', 5000, 1000, 60000), // 5s default, 1-60s range
--      maxRetries: parseNumericEnv('NTFY_MAX_RETRIES', 3, 0, 10), // 3 retries default, 0-10 range
--      maxMessageSize: parseNumericEnv('NTFY_MAX_MESSAGE_SIZE', 4096, 1, 10000) // 4KB default, 1B-10KB range
--    }
--  };
--
--  // Log the loaded configuration
--  envLogger.info(`Environment configuration loaded`, {
--    environment: config.environment,
--    logLevel: config.logLevel,
--    rateLimitWindowMs: config.rateLimit.windowMs,
--    rateLimitMaxRequests: config.rateLimit.maxRequests
--  });
--  
--  // Log ntfy config (but mask sensitive data)
--  envLogger.info(`Ntfy configuration loaded`, {
--    baseUrl: config.ntfy.baseUrl,
--    defaultTopic: config.ntfy.defaultTopic ? config.ntfy.defaultTopic : '(not set)',
--    apiKeyPresent: config.ntfy.apiKey ? '‚úì' : '‚úó',
--    requestTimeout: `${config.ntfy.requestTimeout}ms`,
--    maxRetries: config.ntfy.maxRetries,
--    maxMessageSize: `${config.ntfy.maxMessageSize} bytes`
--  });
--
--  return config;
--}
--
--// Cache the configuration once loaded
--let cachedEnvConfig: EnvironmentConfig | null = null;
--
--/**
-- * Get the environment configuration, loading it on first call
-- * 
-- * This ensures that we only load the configuration when it's actually needed,
-- * not just when the module is imported.
-- * 
-- * @returns The environment configuration
-- */
--export const envConfig = (): EnvironmentConfig => {
--  if (!cachedEnvConfig) {
--    cachedEnvConfig = loadEnvConfig();
--  }
--  return cachedEnvConfig;
--};
--
--/**
-- * Validates the configuration at startup
-- * Throws an error if any validation fails
-- */
--export const validateConfig = (): boolean => {
--  const config = envConfig();
--  
--  // Add any additional validation logic here
--  // Currently the validation happens during loading,
--  // but this hook is available for more complex validation
--  
--  envLogger.info('Configuration validation passed');
--  return true;
--};
--
--// Helper functions for direct property access
--export const getEnvironment = (): string => envConfig().environment;
--export const getLogLevel = (): string => envConfig().logLevel;
--export const getRateLimit = () => envConfig().rateLimit;
--export const getSecurity = () => envConfig().security;
--export const getNtfyConfig = () => envConfig().ntfy;
-diff --git a/src/config/index.ts b/src/config/index.ts
-index 3c2f826..803f6a5 100644
---- a/src/config/index.ts
-+++ b/src/config/index.ts
-@@ -1,206 +1,124 @@
--/**
-- * Configuration Index Module
-- * 
-- * This module serves as the central entrypoint for all configuration-related
-- * functionality. It provides a unified API for accessing configuration values
-- * from various sources (environment variables, package.json).
-- */
--import { promises as fs } from "fs";
--import path from "path";
--import { BaseErrorCode, McpError } from "../types-global/errors.js";
--import { ErrorHandler } from "../utils/errorHandler.js";
--import { logger } from "../utils/logger.js";
--import { sanitizeInput } from "../utils/security.js";
--import { envConfig, EnvironmentConfig, getEnvironment, getLogLevel, getNtfyConfig, getRateLimit, getSecurity } from './envConfig.js';
-+import dotenv from 'dotenv';
-+import path from 'path';
-+import { createRequestContext } from '../utils/requestContext.js';
-+import { logger } from '../utils/logger.js';
- 
--// Create a module-level logger for configuration
--const configLogger = logger.createChildLogger({
--  module: 'ConfigManager'
--});
-+// Initialize environment variables from .env file
-+dotenv.config();
- 
--// Default package info in case we can't load it
--const DEFAULT_PACKAGE_INFO = {
--  name: "ntfy-mcp-server",
--  version: "0.0.0"
--};
--
--// Maximum file size for package.json (5MB) to prevent potential DoS
--const MAX_FILE_SIZE = 5 * 1024 * 1024;
-+// Create a request context for logging
-+const configContext = createRequestContext({
-+  operation: 'ConfigInit',
-+  component: 'Config',
-+});
- 
--/**
-- * Unified application configuration interface
-- */
--export interface AppConfig {
--  // Server info
--  serverName: string;
--  serverVersion: string;
--  
--  // Environment configuration 
--  environment: string;
--  logLevel: string;
--  rateLimit: {
--    windowMs: number;
--    maxRequests: number;
--  };
--  security: Record<string, any>;
--  
--  // Ntfy configuration
--  ntfy: {
--    apiKey: string;
--    baseUrl: string;
--    defaultTopic: string;
--    requestTimeout: number;
--    maxRetries: number;
--    maxMessageSize: number;
--  };
--  
--  // Metadata
--  configLoadTime: string;
--}
-+// Create a logger specific to config
-+const configLogger = logger.createChildLogger({
-+  module: 'Config',
-+  service: 'Config',
-+  requestId: configContext.requestId,
-+});
- 
- /**
-- * Load and parse the package.json file to get application information
-- * 
-- * @returns Promise resolving to object containing name and version from package.json
-+ * Environment validation and parsing utilities
-  */
--async function loadPackageInfo(): Promise<{ name: string; version: string }> {
--  try {
--    // Get package info
--    const pkgPath = path.resolve(process.cwd(), 'package.json');
--    const sanitizedPath = sanitizeInput.path(pkgPath);
--    
--    configLogger.debug(`Loading package info from ${sanitizedPath}`);
--    
--    // Get file stats to check size before reading
--    const stats = await fs.stat(sanitizedPath);
--    
--    // Check file size to prevent DoS attacks
--    if (stats.size > MAX_FILE_SIZE) {
--      throw new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        `package.json file is too large (${stats.size} bytes)`,
--        { path: sanitizedPath, maxSize: MAX_FILE_SIZE }
--      );
--    }
--    
--    // Use async file operations
--    const pkgContent = await fs.readFile(sanitizedPath, 'utf-8');
--    const pkg = JSON.parse(pkgContent);
--    
--    // Validate expected fields
--    if (!pkg.name || typeof pkg.name !== 'string') {
--      throw new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        'Invalid package.json: missing or invalid name field',
--        { path: sanitizedPath }
--      );
--    }
-+const parsers = {
-+  /**
-+   * Parse environment string to number with validation
-+   * 
-+   * @param value - String value from environment
-+   * @param defaultValue - Default value to use if parsing fails
-+   * @returns Parsed number value
-+   */
-+  number: (value: string | undefined, defaultValue: number): number => {
-+    if (!value) return defaultValue;
-     
--    if (!pkg.version || typeof pkg.version !== 'string') {
--      throw new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        'Invalid package.json: missing or invalid version field',
--        { path: sanitizedPath }
--      );
-+    const parsed = parseInt(value, 10);
-+    if (isNaN(parsed)) {
-+      configLogger.warn(`Invalid number for environment variable, using default: ${defaultValue}`, {
-+        value,
-+        defaultValue
-+      });
-+      return defaultValue;
-     }
-     
--    configLogger.info(`Loaded application info`, {
--      name: pkg.name,
--      version: pkg.version
--    });
-+    return parsed;
-+  },
-+  
-+  /**
-+   * Parse environment string to boolean
-+   * 
-+   * @param value - String value from environment
-+   * @param defaultValue - Default value to use if parsing fails
-+   * @returns Parsed boolean value
-+   */
-+  boolean: (value: string | undefined, defaultValue: boolean): boolean => {
-+    if (!value) return defaultValue;
-     
--    return {
--      name: pkg.name,
--      version: pkg.version
--    };
--  } catch (error) {
--    // Log the error but don't rethrow
--    ErrorHandler.handleError(error, {
--      context: { path: path.resolve(process.cwd(), 'package.json') },
--      operation: "loading package info"
--    });
-+    const normalized = value.toLowerCase().trim();
-+    if (['true', '1', 'yes', 'y'].includes(normalized)) return true;
-+    if (['false', '0', 'no', 'n'].includes(normalized)) return false;
-     
--    configLogger.error(`Failed to load package.json, using default values`, {
--      error: error instanceof Error ? error.message : String(error)
-+    configLogger.warn(`Invalid boolean for environment variable, using default: ${defaultValue}`, {
-+      value,
-+      defaultValue
-     });
-+    return defaultValue;
-+  },
-+  
-+  /**
-+   * Parse environment string to an array of strings
-+   * 
-+   * @param value - Comma-separated string value from environment
-+   * @param defaultValue - Default value to use if parsing fails
-+   * @returns Array of parsed string values
-+   */
-+  array: (value: string | undefined, defaultValue: string[] = []): string[] => {
-+    if (!value) return defaultValue;
-     
--    // Return default values
--    return DEFAULT_PACKAGE_INFO;
--  }
--}
--
--// Cache for package info
--let cachedPackageInfo: { name: string; version: string } | null = null;
--
--/**
-- * Get package info, loading it on first call
-- */
--export async function getPackageInfo(): Promise<{ name: string; version: string }> {
--  if (!cachedPackageInfo) {
--    cachedPackageInfo = await loadPackageInfo();
-+    return value.split(',').map(item => item.trim()).filter(Boolean);
-   }
--  return cachedPackageInfo;
--}
-+};
- 
- /**
-- * Build the full application configuration object
-- * 
-- * This function lazy-loads all configuration components when called.
-+ * Environment variable configuration
-  */
--async function buildAppConfig(): Promise<AppConfig> {
--  const packageInfo = await getPackageInfo();
--  const env = envConfig();
-+export const config = {
-+  environment: process.env.NODE_ENV || 'development',
-+  logLevel: process.env.LOG_LEVEL || 'info',
-   
--  configLogger.info(`Building unified application configuration`, {
--    environment: env.environment,
--    packageName: packageInfo.name
--  });
-+  // HTTP server configuration
-+  server: {
-+    port: parsers.number(process.env.PORT, 3000),
-+    host: process.env.HOST || 'localhost',
-+  },
-   
--  return {
--    // Server info
--    serverName: packageInfo.name,
--    serverVersion: packageInfo.version,
--    
--    // Environment configuration
--    environment: env.environment,
--    logLevel: env.logLevel,
--    rateLimit: env.rateLimit,
--    security: env.security,
--    
--    // Ntfy configuration
--    ntfy: env.ntfy,
--    
--    // Metadata
--    configLoadTime: new Date().toISOString()
--  };
--}
--
--// Cache for config
--let cachedAppConfig: AppConfig | null = null;
--
--/**
-- * Get the complete application configuration
-- * 
-- * @returns Promise resolving to the full application configuration
-- */
--export async function getConfig(): Promise<AppConfig> {
--  if (!cachedAppConfig) {
--    cachedAppConfig = await buildAppConfig();
--    
--    // Log configuration summary
--    configLogger.info(`Configuration loaded successfully`, {
--      serverName: cachedAppConfig.serverName,
--      version: cachedAppConfig.serverVersion,
--      environment: cachedAppConfig.environment
--    });
--  }
--  return cachedAppConfig;
--}
--
--// Export types and functions from the sub-modules
--export {
--  // Environment config
--  envConfig, getEnvironment, getLogLevel, getNtfyConfig, getRateLimit, getSecurity
-+  // Rate limiting settings
-+  rateLimit: {
-+    windowMs: parsers.number(process.env.RATE_LIMIT_WINDOW_MS, 60000),
-+    maxRequests: parsers.number(process.env.RATE_LIMIT_MAX_REQUESTS, 100),
-+  },
-+  
-+  // Ntfy notification service configuration
-+  ntfy: {
-+    baseUrl: process.env.NTFY_BASE_URL || 'https://ntfy.sh',
-+    defaultTopic: process.env.NTFY_DEFAULT_TOPIC || '',
-+    apiKey: process.env.NTFY_API_KEY || '',
-+    maxMessageSize: parsers.number(process.env.NTFY_MAX_MESSAGE_SIZE, 4096),
-+    maxRetries: parsers.number(process.env.NTFY_MAX_RETRIES, 3),
-+  },
- };
--export type { EnvironmentConfig };
- 
-+// Log the loaded configuration (excluding sensitive values)
-+configLogger.info('Configuration loaded', {
-+  environment: config.environment,
-+  logLevel: config.logLevel,
-+  server: config.server,
-+  ntfy: {
-+    baseUrl: config.ntfy.baseUrl,
-+    defaultTopic: config.ntfy.defaultTopic || '(not set)',
-+    hasApiKey: !!config.ntfy.apiKey,
-+  },
-+});
-+
-+export default config;
-diff --git a/src/config/parsers.ts b/src/config/parsers.ts
-deleted file mode 100644
-index 2b61330..0000000
---- a/src/config/parsers.ts
-+++ /dev/null
-@@ -1,212 +0,0 @@
--/**
-- * Configuration value parsers
-- * 
-- * This module contains utility functions for parsing and validating
-- * environment variables with proper type conversion and validation.
-- */
--import { BaseErrorCode, McpError } from '../types-global/errors.js';
--import { ErrorHandler } from '../utils/errorHandler.js';
--import { logger } from '../utils/logger.js';
--import { sanitizeInput } from '../utils/security.js';
--
--// Create a module-level logger for environment configuration parsers
--const parserLogger = logger.createChildLogger({
--  module: 'ConfigParsers'
--});
--
--/**
-- * Parse a numeric environment variable with validation
-- * 
-- * @param name - The name of the environment variable
-- * @param defaultValue - The default value if not set or invalid
-- * @param min - Optional minimum valid value
-- * @param max - Optional maximum valid value
-- * @returns The parsed numeric value
-- */
--export function parseNumericEnv(
--  name: string, 
--  defaultValue: number, 
--  min?: number, 
--  max?: number
--): number {
--  const rawValue = process.env[name];
--  
--  if (rawValue === undefined) {
--    parserLogger.debug(`Using default value for ${name}`, { defaultValue });
--    return defaultValue;
--  }
--  
--  try {
--    // Sanitize and parse the value
--    const sanitizedValue = sanitizeInput.string(rawValue);
--    const parsedValue = parseFloat(sanitizedValue);
--    
--    if (isNaN(parsedValue)) {
--      throw new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        `Invalid numeric value for ${name}: ${sanitizedValue}`,
--        { raw: sanitizedValue }
--      );
--    }
--    
--    // Apply bounds constraints if provided
--    if (min !== undefined && parsedValue < min) {
--      parserLogger.warn(`Value for ${name} is below minimum (${min}), using minimum`, { 
--        parsed: parsedValue, min, raw: sanitizedValue 
--      });
--      return min;
--    }
--    
--    if (max !== undefined && parsedValue > max) {
--      parserLogger.warn(`Value for ${name} is above maximum (${max}), using maximum`, { 
--        parsed: parsedValue, max, raw: sanitizedValue 
--      });
--      return max;
--    }
--    
--    parserLogger.debug(`Parsed ${name} environment variable`, { value: parsedValue });
--    return parsedValue;
--  } catch (error) {
--    ErrorHandler.handleError(error, {
--      context: { envVar: name, rawValue },
--      operation: `parsing environment variable ${name}`,
--      errorCode: BaseErrorCode.VALIDATION_ERROR
--    });
--    
--    parserLogger.warn(`Using default value for ${name} due to parsing error`, { defaultValue });
--    return defaultValue;
--  }
--}
--
--/**
-- * Parse a boolean environment variable with validation
-- * 
-- * @param name - The name of the environment variable
-- * @param defaultValue - The default value if not set or invalid
-- * @returns The parsed boolean value
-- */
--export function parseBooleanEnv(name: string, defaultValue: boolean): boolean {
--  const rawValue = process.env[name];
--  
--  if (rawValue === undefined) {
--    parserLogger.debug(`Using default value for ${name}`, { defaultValue });
--    return defaultValue;
--  }
--  
--  try {
--    // Sanitize the input
--    const sanitizedValue = sanitizeInput.string(rawValue).toLowerCase();
--    
--    // Allow for various truthy/falsy string representations
--    if (['true', 'yes', '1', 'on'].includes(sanitizedValue)) {
--      return true;
--    }
--    
--    if (['false', 'no', '0', 'off'].includes(sanitizedValue)) {
--      return false;
--    }
--    
--    throw new McpError(
--      BaseErrorCode.VALIDATION_ERROR,
--      `Invalid boolean value for ${name}: ${sanitizedValue}`,
--      { raw: sanitizedValue }
--    );
--  } catch (error) {
--    ErrorHandler.handleError(error, {
--      context: { envVar: name, rawValue },
--      operation: `parsing environment variable ${name}`,
--      errorCode: BaseErrorCode.VALIDATION_ERROR
--    });
--    
--    parserLogger.warn(`Using default value for ${name} due to parsing error`, { defaultValue });
--    return defaultValue;
--  }
--}
--
--/**
-- * Parses a string environment variable with optional validation
-- * 
-- * @param name - The environment variable name
-- * @param defaultValue - Default value if not set or invalid
-- * @param validator - Optional validation function
-- * @returns The validated string value
-- */
--export function parseStringEnv(
--  name: string,
--  defaultValue: string,
--  validator?: (value: string) => boolean
--): string {
--  const rawValue = process.env[name];
--  
--  if (rawValue === undefined) {
--    parserLogger.debug(`Using default value for ${name}`, { 
--      defaultValue: defaultValue ? '(set)' : '(empty)' 
--    });
--    return defaultValue;
--  }
--  
--  try {
--    // Sanitize the input
--    const sanitizedValue = sanitizeInput.string(rawValue);
--    
--    // Validate if a validator was provided
--    if (validator && !validator(sanitizedValue)) {
--      throw new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        `Invalid value for ${name}: ${sanitizedValue}`,
--        { raw: sanitizedValue }
--      );
--    }
--    
--    return sanitizedValue;
--  } catch (error) {
--    ErrorHandler.handleError(error, {
--      context: { envVar: name, rawValue },
--      operation: `parsing environment variable ${name}`,
--      errorCode: BaseErrorCode.VALIDATION_ERROR
--    });
--    
--    parserLogger.warn(`Using default value for ${name} due to validation error`, { 
--      defaultValue: defaultValue ? '(set)' : '(empty)' 
--    });
--    return defaultValue;
--  }
--}
--
--/**
-- * Common validators for config values
-- */
--export const validators = {
--  /**
--   * Validate a ntfy topic string
--   * 
--   * @param topic - The topic string to validate
--   * @returns true if valid, false otherwise
--   */
--  ntfyTopic: (topic: string): boolean => {
--    // A valid topic should not be empty and shouldn't contain newlines
--    if (!topic || topic.trim() === '' || /[\r\n]/.test(topic)) {
--      return false;
--    }
--    return true;
--  },
--  
--  /**
--   * Validate a URL string
--   * 
--   * @param url - The URL string to validate
--   * @returns true if valid, false otherwise
--   */
--  url: (url: string): boolean => {
--    if (!url || url.trim() === '') {
--      return false;
--    }
--    
--    try {
--      new URL(url);
--      return true;
--    } catch (e) {
--      return false;
--    }
--  }
--};
-diff --git a/src/index.ts b/src/index.ts
-index 593d023..b3cc656 100644
---- a/src/index.ts
-+++ b/src/index.ts
-@@ -1,85 +1,121 @@
- #!/usr/bin/env node
--
- /**
-- * ntfy-mcp-server - Main entry point
-+ * Ntfy MCP Server - Main Entry Point
-  * 
-- * This file initializes the MCP server and sets up signal handlers
-- * for graceful shutdown.
-+ * This is the main entry point for the Ntfy MCP server. It initializes the 
-+ * server, sets up signal handlers for graceful shutdown, and manages the
-+ * application lifecycle.
-  */
--
--// Import dependencies
-+import { config } from "./config/index.js";
- import { createMcpServer } from "./mcp-server/server.js";
- import { logger } from "./utils/logger.js";
-+import { createRequestContext } from "./utils/requestContext.js";
- 
--// Track the server instance
--let server: Awaited<ReturnType<typeof createMcpServer>> | undefined;
-+// Create main application logger
-+const appLogger = logger.createChildLogger({
-+  module: 'NtfyMcpServer',
-+  service: 'NtfyMcpServer',
-+  component: 'Main',
-+  environment: config.environment
-+});
- 
- /**
-- * Gracefully shut down the server
-+ * Graceful shutdown handler
-+ * @param signal The signal that triggered the shutdown
-  */
- const shutdown = async (signal: string): Promise<void> => {
-+  appLogger.info(`Shutting down due to ${signal} signal...`);
-+  
-   try {
--    // Close the MCP server
--    if (server) {
--      logger.info(`Closing MCP server due to ${signal} signal...`);
--      await server.close();
--      logger.info("MCP server closed successfully");
-+    if (mcpServer) {
-+      appLogger.info('Closing MCP server...');
-+      await mcpServer.close();
-+      appLogger.info('MCP server closed successfully');
-     }
--
--    logger.info("Graceful shutdown completed");
-+    
-+    appLogger.info('Shutdown complete. Exiting process.');
-     process.exit(0);
-   } catch (error) {
--    // Handle any errors during shutdown silently (no console output)
--    logger.error("Critical error during shutdown", { 
-+    appLogger.error('Error during shutdown', {
-       error: error instanceof Error ? error.message : String(error),
--      stack: error instanceof Error ? error.stack : undefined
-+      signal
-     });
-     process.exit(1);
-   }
- };
- 
-+// Variable to hold server instance
-+let mcpServer: Awaited<ReturnType<typeof createMcpServer>> | undefined;
-+
- /**
-- * Start the NTFY MCP server
-+ * Main startup function
-  */
- const start = async (): Promise<void> => {
-+  // Create startup context
-+  const startupContext = createRequestContext({
-+    operation: "ServerStartup",
-+    appName: "ntfy-mcp-server",
-+    environment: config.environment,
-+  });
-+
-+  appLogger.info("Starting ntfy-mcp-server...", {
-+    environment: config.environment,
-+    logLevel: config.logLevel,
-+    requestId: startupContext.requestId
-+  });
-+
-   try {
--    // Create and store server instance
--    server = await createMcpServer();
-+    // Validate ntfy configuration
-+    const ntfyConfig = config.ntfy;
-     
--    // Handle process signals for graceful shutdown
-+    if (!ntfyConfig.baseUrl) {
-+      appLogger.warn("Ntfy base URL not configured. Using default https://ntfy.sh");
-+    }
-+    
-+    if (!ntfyConfig.defaultTopic) {
-+      appLogger.warn("No default ntfy topic configured. Some functionality may be limited.");
-+    }
-+    
-+    // Create main MCP server
-+    appLogger.info("Creating MCP server...");
-+    mcpServer = await createMcpServer();
-+    appLogger.info("MCP server created and connected successfully");
-+
-+    // Register signal handlers for graceful shutdown
-     process.on("SIGTERM", () => shutdown("SIGTERM"));
-     process.on("SIGINT", () => shutdown("SIGINT"));
--
--    // Handle uncaught errors with silent logging
-+    
-+    // Handle uncaught exceptions
-     process.on("uncaughtException", (error) => {
--      logger.error("Uncaught exception", { 
-+      appLogger.error("Uncaught exception", {
-         error: error instanceof Error ? error.message : String(error),
-         stack: error instanceof Error ? error.stack : undefined
-       });
--      shutdown("UNCAUGHT_EXCEPTION");
-     });
--
--    process.on("unhandledRejection", (reason: unknown) => {
--      logger.error("Unhandled rejection", { 
-+    
-+    // Handle unhandled promise rejections
-+    process.on("unhandledRejection", (reason) => {
-+      appLogger.error("Unhandled promise rejection", {
-         reason: reason instanceof Error ? reason.message : String(reason),
-         stack: reason instanceof Error ? reason.stack : undefined
-       });
--      shutdown("UNHANDLED_REJECTION");
-     });
-+    
-+    appLogger.info("Server startup complete. Ready to handle requests.");
-   } catch (error) {
--    // Handle startup errors
--    logger.error("Critical error during startup", { 
-+    appLogger.error("Failed to start server", {
-       error: error instanceof Error ? error.message : String(error),
-       stack: error instanceof Error ? error.stack : undefined
-     });
-+    
-+    // Exit with non-zero code to indicate error
-     process.exit(1);
-   }
- };
- 
--// Start the server
-+// Start the application
- start().catch((error) => {
--  // Handle any uncaught errors from the start function silently
--  logger.error("Fatal error in server startup", {
-+  appLogger.error("Fatal error during startup", {
-     error: error instanceof Error ? error.message : String(error),
-     stack: error instanceof Error ? error.stack : undefined
-   });
-diff --git a/src/mcp-server/resources/echoResource/getEchoMessage.ts b/src/mcp-server/resources/echoResource/getEchoMessage.ts
-deleted file mode 100644
-index fb7d4dc..0000000
---- a/src/mcp-server/resources/echoResource/getEchoMessage.ts
-+++ /dev/null
-@@ -1,104 +0,0 @@
--import { BaseErrorCode, McpError } from '../../../types-global/errors.js';
--import { ErrorHandler } from '../../../utils/errorHandler.js';
--import { logger } from '../../../utils/logger.js';
--import { createRequestContext, sanitizeInput } from '../../../utils/security.js';
--import { EchoResourceQuery, EchoResourceQuerySchema, EchoResourceResponse } from './types.js';
--
--// Create resource-specific logger
--const resourceLogger = logger.createChildLogger({
--  service: 'EchoResource'
--});
--
--export const getEchoMessage = async (uri: URL): Promise<EchoResourceResponse> => {
--  // Create a request context with unique ID
--  const requestContext = createRequestContext({ 
--    operation: 'getEchoMessage',
--    uri: uri.toString() 
--  });
--  const requestId = requestContext.requestId;
--
--  // Parse and validate query parameters
--  const queryParams: Record<string, string> = {};
--  uri.searchParams.forEach((value, key) => {
--    // Sanitize input parameters
--    queryParams[key] = sanitizeInput.string(value);
--  });
--
--  resourceLogger.info("Echo resource request received", { 
--    requestId,
--    queryParams,
--    uri: uri.href
--  });
--
--  return ErrorHandler.tryCatch(async () => {
--    let validatedQuery: EchoResourceQuery;
--    try {
--      validatedQuery = EchoResourceQuerySchema.parse(queryParams);
--    } catch (validationError) {
--      throw new McpError(
--        BaseErrorCode.VALIDATION_ERROR,
--        'Invalid echo resource query parameters',
--        { 
--          error: validationError instanceof Error ? validationError.message : 'Unknown validation error',
--          requestId,
--          params: queryParams
--        }
--      );
--    }
--
--    // Prepare response data
--    const message = validatedQuery.message || 'Hello from echo resource!';
--    const responseData = {
--      message,
--      timestamp: new Date().toISOString(),
--      requestUri: uri.href,
--      requestId
--    };
--
--    resourceLogger.info("Echo resource response data prepared", { 
--      requestId,
--      responseData
--    });
--    
--    // Return in the standard MCP format 
--    const response: EchoResourceResponse = {
--      contents: [{
--        uri: uri.href,
--        text: JSON.stringify(responseData, null, 2),
--        mimeType: "application/json"
--      }]
--    };
--    
--    return response;
--  }, {
--    context: { 
--      requestId, 
--      uri: uri.toString() 
--    },
--    operation: 'processing echo resource request',
--    errorMapper: (error) => {
--      // Map validation errors to VALIDATION_ERROR, other errors to INTERNAL_ERROR
--      const errorPattern = [
--        { 
--          pattern: /invalid|validation|parse/i, 
--          errorCode: BaseErrorCode.VALIDATION_ERROR,
--          factory: () => 
--            new McpError(BaseErrorCode.VALIDATION_ERROR, 
--              `Invalid echo resource parameters: ${error instanceof Error ? error.message : 'Unknown error'}`,
--              { requestId, uri: uri.toString() })
--        }
--      ];
--      
--      return ErrorHandler.mapError(
--        error, 
--        errorPattern, 
--        () => new McpError(
--          BaseErrorCode.INTERNAL_ERROR, 
--          `Error processing echo resource request: ${error instanceof Error ? error.message : 'Unknown error'}`,
--          { requestId, uri: uri.toString() }
--        )
--      );
--    },
--    rethrow: true
--  });
--};
-\ No newline at end of file
-diff --git a/src/mcp-server/resources/echoResource/index.ts b/src/mcp-server/resources/echoResource/index.ts
-deleted file mode 100644
-index 4d6d1c6..0000000
---- a/src/mcp-server/resources/echoResource/index.ts
-+++ /dev/null
-@@ -1,121 +0,0 @@
--import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";
--import { z } from 'zod';
--import { BaseErrorCode, McpError } from '../../../types-global/errors.js';
--import { ErrorHandler } from '../../../utils/errorHandler.js';
--import { ChildLogger } from '../../../utils/logger.js';
--import { registerResource } from '../../utils/registrationHelper.js';
--
--/**
-- * Process the echo resource request
-- * 
-- * @param uri The resource URI 
-- * @param params The query parameters
-- * @returns Processed response data
-- */
--const processEchoResource = (uri: URL, params: { message?: string }) => {
--  // Extract message from params or use default
--  const message = params.message || 'Hello from echo resource!';
--  
--  // Prepare response data
--  return {
--    message,
--    timestamp: new Date().toISOString(),
--    requestUri: uri.href
--  };
--};
--
--/**
-- * Register the echo resource with the MCP server
-- * 
-- * This function creates and registers the echo resource which returns a message
-- * provided in the query parameters. It configures the resource with appropriate
-- * metadata, rate limiting, and caching settings.
-- * 
-- * @param server - The MCP server instance to register the resource with
-- * @returns Promise resolving when registration is complete
-- */
--export const registerEchoResource = async (server: McpServer): Promise<void> => {
--  return registerResource(
--    server,
--    { name: "echo-resource" },
--    async (server, resourceLogger: ChildLogger) => {
--      // Create resource template
--      const template = new ResourceTemplate(
--        "echo://{message}",
--        {
--          // Simple list implementation
--          list: async () => ({
--            resources: [{
--              uri: "echo://hello",
--              name: "Default Echo Message",
--              description: "A simple echo resource example"
--            }]
--          }),
--          // No completion needed for this resource
--          complete: {}
--        }
--      );
--
--      // Register the resource
--      server.resource(
--        // Resource name
--        "echo-resource",
--        
--        // Resource template
--        template,
--        
--        // Resource metadata
--        {
--          name: "Echo Message",
--          description: "A simple echo resource that returns a message",
--          mimeType: "application/json",
--          
--          // Query schema
--          querySchema: z.object({
--            message: z.string().optional()
--              .describe('Message to echo back in the response')
--          }),
--          
--          // Examples
--          examples: [
--            {
--              name: "Basic echo",
--              uri: "echo://hello",
--              description: "Get a default welcome message"
--            }
--          ],
--        },
--        
--        // Resource handler
--        async (uri, params) => {
--          // Use ErrorHandler.tryCatch for consistent error handling
--          return await ErrorHandler.tryCatch(
--            async () => {
--              const responseData = processEchoResource(uri, params);
--              
--              // Return in the standardized format expected by the MCP SDK
--              return {
--                contents: [{
--                  uri: uri.href,
--                  text: JSON.stringify(responseData, null, 2),
--                  mimeType: "application/json"
--                }]
--              };
--            },
--            {
--              operation: 'processing echo resource',
--              input: { uri: uri.href, params },
--              // Provide custom error mapping for better error messages
--              errorMapper: (error) => new McpError(
--                BaseErrorCode.INTERNAL_ERROR,
--                `Error processing echo resource: ${error instanceof Error ? error.message : 'Unknown error'}`
--              )
--            }
--          );
--        }
--      );
--      
--      resourceLogger.info("Echo resource handler registered");
--    }
--  );
--};
-\ No newline at end of file
-diff --git a/src/mcp-server/resources/echoResource/types.ts b/src/mcp-server/resources/echoResource/types.ts
-deleted file mode 100644
-index 17ea8af..0000000
---- a/src/mcp-server/resources/echoResource/types.ts
-+++ /dev/null
-@@ -1,35 +0,0 @@
--import { z } from 'zod';
--
--/**
-- * Schema for validating echo resource query parameters
-- */
--export const EchoResourceQuerySchema = z.object({
--  message: z.string().optional()
--    .describe('Message to echo back in the response')
--}).describe(
--  'Query parameters for the echo resource.\n' +
--  'URI Format: echo://message'
--);
--
--export type EchoResourceQuery = z.infer<typeof EchoResourceQuerySchema>;
--
--/**
-- * Response type for the echo resource, matching MCP SDK expectations
-- */
--export interface EchoResourceResponse {
--  [key: string]: unknown;
--  contents: [{
--    uri: string;                   // URI identifying this resource
--    text: string;                  // JSON string of EchoData
--    mimeType: "application/json";  // Always JSON for this resource
--  }];
--}
--
--/**
-- * Data structure for the echo response
-- */
--export interface EchoData {
--  message: string;              // The echoed message
--  timestamp: string;            // When the request was processed
--  requestUri: string;           // The original request URI
--}
-\ No newline at end of file
-diff --git a/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts b/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts
-index 209707c..8b5f0f2 100644
---- a/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts
-+++ b/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts
-@@ -2,11 +2,12 @@ import { BaseErrorCode, McpError } from '../../../types-global/errors.js';
- import { ErrorHandler } from '../../../utils/errorHandler.js';
- import { logger } from '../../../utils/logger.js';
- import { createRequestContext } from '../../../utils/security.js';
--import { getNtfyConfig } from '../../../config/envConfig.js';
-+import { config } from '../../../config/index.js';
- import { NtfyResourceQuery, NtfyResourceQuerySchema, NtfyResourceResponse } from './types.js';
- 
- // Create resource-specific logger
- const resourceLogger = logger.createChildLogger({
-+  module: 'NtfyResource',
-   service: 'NtfyResource'
- });
- 
-@@ -25,7 +26,7 @@ export const getNtfyTopic = async (uri: URL): Promise<NtfyResourceResponse> => {
- 
-   return ErrorHandler.tryCatch(async () => {
-     // Get the default topic from configuration
--    const ntfyConfig = getNtfyConfig();
-+    const ntfyConfig = config.ntfy;
-     let defaultTopic = ntfyConfig.defaultTopic;
-     
-     if (!defaultTopic) {
-diff --git a/src/mcp-server/resources/ntfyResource/index.ts b/src/mcp-server/resources/ntfyResource/index.ts
-index 8e91a22..28f6804 100644
---- a/src/mcp-server/resources/ntfyResource/index.ts
-+++ b/src/mcp-server/resources/ntfyResource/index.ts
-@@ -65,10 +65,14 @@ export const registerNtfyResource = async (server: McpServer): Promise<void> =>
-         
-         // Resource handler
-         async (uri, params) => {
-+          // Decode the URI pathname to handle URL encoding
-+          const decodedPathname = decodeURIComponent(uri.pathname);
-+          
-           // Handle both /default and default pathname formats for backward compatibility
--          if (uri.pathname !== '/default' && uri.pathname !== 'default') {
-+          if (decodedPathname !== '/default' && decodedPathname !== 'default') {
-             resourceLogger.error(`Invalid ntfy resource uri: ${uri.href}`, {
-               pathname: uri.pathname,
-+              decodedPathname,
-               href: uri.href,
-               protocol: uri.protocol
-             });
-diff --git a/src/mcp-server/server.ts b/src/mcp-server/server.ts
-index f3276ae..a8eca33 100644
---- a/src/mcp-server/server.ts
-+++ b/src/mcp-server/server.ts
-@@ -4,7 +4,8 @@ import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js"
- import { EventEmitter } from "events";
- import { promises as fs } from "fs";
- import path from "path";
--import { envConfig } from "../config/envConfig.js";
-+import { fileURLToPath } from 'url';
-+import { config } from "../config/index.js";
- import { BaseErrorCode, McpError } from "../types-global/errors.js";
- import { ErrorHandler } from "../utils/errorHandler.js";
- import { idGenerator } from "../utils/idGenerator.js";
-@@ -12,29 +13,14 @@ import { logger } from "../utils/logger.js";
- import { createRequestContext } from "../utils/requestContext.js";
- import { configureContext, sanitizeInput } from "../utils/security.js";
- 
-+// Calculate __dirname equivalent for ES modules
-+const __filename = fileURLToPath(import.meta.url);
-+const __dirname = path.dirname(__filename);
-+
- // Import tool and resource registrations
- import { registerNtfyTool } from "./tools/ntfyTool/index.js";
- import { registerNtfyResource } from "./resources/ntfyResource/index.js";
- 
--/**
-- * Note on MCP Resource Representations:
-- * 
-- * When registering resources like the ntfy resource, they appear in two forms in MCP:
-- * 
-- * 1. Resource Template - Example: "ntfy://{topic}"
-- *    This is a template showing the URI pattern for accessing resources.
-- *    The template contains placeholders (like {topic}) showing the structure
-- *    of valid URIs. Templates help clients understand how to construct valid
-- *    resource URIs.
-- * 
-- * 2. Concrete Resource Instance - Example: "ntfy://default"
-- *    This is a specific, available resource that follows the template pattern.
-- *    Concrete resources are actual endpoints that can be accessed to retrieve data.
-- *    These are listed to help clients discover available resources.
-- * 
-- * Both representations are necessary for proper MCP resource discovery and usage.
-- */
--
- // Maximum file size for package.json (5MB) to prevent potential DoS
- const MAX_FILE_SIZE = 5 * 1024 * 1024;
- 
-@@ -46,9 +32,12 @@ const MAX_FILE_SIZE = 5 * 1024 * 1024;
- const loadPackageInfo = async (): Promise<{ name: string; version: string }> => {
-   return await ErrorHandler.tryCatch(
-     async () => {
--      const pkgPath = path.resolve(process.cwd(), 'package.json');
-+      // Use the globally defined __dirname from the top of the file
-+      const pkgPath = path.resolve(__dirname, '../../package.json');
-       const safePath = sanitizeInput.path(pkgPath);
-       
-+      console.error(`Looking for package.json at: ${safePath}`);
-+      
-       // Get file stats to check size before reading
-       const stats = await fs.stat(safePath);
-       
-@@ -180,10 +169,11 @@ export const createMcpServer = async () => {
- 
-   // Create server-specific logger with context
-   const serverLogger = logger.createChildLogger({
-+    module: 'MCPServer',
-     service: 'MCPServer',
-     requestId: serverContext.requestId,
-     serverId,
--    environment: envConfig().environment
-+    environment: config.environment
-   });
- 
-   // Create server events emitter
-@@ -197,6 +187,7 @@ export const createMcpServer = async () => {
-     });
-   });
-   
-+  console.error("Initializing MCP server...");
-   serverLogger.info("Initializing server...");
-   
-   const timers: Array<NodeJS.Timeout> = [];
-@@ -207,179 +198,20 @@ export const createMcpServer = async () => {
-       const packageInfo = await loadPackageInfo();
-       
-       // Update logger with package info
-+      console.error("Loaded package info:", packageInfo.name, packageInfo.version);
-       serverLogger.info("Loaded package info", {
-         name: packageInfo.name,
-         version: packageInfo.version
-       });
--    
--      // Rate limiting configuration
--      const rateLimitSettings = {
--        windowMs: envConfig().rateLimit.windowMs || 60000,
--        maxRequests: envConfig().rateLimit.maxRequests || 100
--      };
--      
--      // Configure context settings
--      const contextConfig = configureContext({
--        // Any future non-auth context settings can go here
--      });
- 
-       // Create the MCP server instance
-+      console.error("Creating MCP server instance...");
-       server = new McpServer({
-         name: packageInfo.name,
-         version: packageInfo.version
-       });
-+      console.error("MCP server instance created");
-       
--      // Set up error handling
--      process.on('uncaughtException', (error) => {
--        serverState.status = 'error';
--        serverState.errors.push({
--          timestamp: new Date(),
--          message: error.message,
--          code: error instanceof McpError ? error.code : 'UNCAUGHT_EXCEPTION'
--        });
--        
--        ErrorHandler.handleError(error, {
--          operation: 'UncaughtException',
--          context: serverContext,
--          critical: true
--        });
--      });
--      
--      process.on('unhandledRejection', (reason) => {
--        serverState.status = 'error';
--        serverState.errors.push({
--          timestamp: new Date(),
--          message: reason instanceof Error ? reason.message : String(reason),
--          code: reason instanceof McpError ? reason.code : 'UNHANDLED_REJECTION'
--        });
--        
--        ErrorHandler.handleError(reason, {
--          operation: 'UnhandledRejection',
--          context: serverContext,
--          critical: true
--        });
--      });
--      
--      /**
--       * Update server status based on current state
--       */
--      const updateServerStatus = () => {
--        const requiredToolsMet = Array.from(serverState.requiredTools)
--          .every(tool => serverState.registeredTools.has(tool));
--        const requiredResourcesMet = Array.from(serverState.requiredResources)
--          .every(resource => serverState.registeredResources.has(resource));
--        
--        const oldStatus = serverState.status;
--        // Only update if not in terminal states
--        if (!['shutdown', 'shutting_down'].includes(oldStatus)) {
--          const newStatus = requiredToolsMet && requiredResourcesMet ? 'running' : 'degraded';
--          if (oldStatus !== newStatus) {
--            serverState.status = newStatus;
--            serverEvents.emitStateChange(oldStatus, newStatus);
--          }
--        }
--      };
--      
--      /**
--       * Health check function
--       */
--      function runHealthCheck() {
--        return ErrorHandler.tryCatch(
--          async () => {
--            serverState.lastHealthCheck = new Date();
--            
--            // Check for stalled operations (longer than 5 minutes)
--            const now = Date.now();
--            for (const [opId, opInfo] of serverState.activeOperations.entries()) {
--              const opRuntime = now - opInfo.startTime.getTime();
--              if (opRuntime > 300000) { // 5 minutes
--                serverLogger.warn(`Operation ${opInfo.operation} (${opId}) has been running for over 5 minutes`, {
--                  operation: opInfo.operation,
--                  startTime: opInfo.startTime,
--                  runtime: opRuntime
--                });
--              }
--            }
--            
--            serverLogger.debug("Server health check", { 
--              status: serverState.status,
--              uptime: (now - serverState.startTime.getTime()) / 1000,
--              activeOperations: serverState.activeOperations.size,
--              errors: serverState.errors.length
--            });
--          },
--          {
--            operation: 'HealthCheck',
--            context: serverContext
--          }
--        );
--      }
--      
--      // Create interval that won't prevent process exit
--      const healthCheckInterval = setInterval(() => runHealthCheck(), 60000); // Every minute
--      healthCheckInterval.unref(); // Ensures this won't prevent process exit
--      
--      // Track the interval for cleanup
--      timers.push(healthCheckInterval);
--      
--      /**
--       * Cleanup function to handle graceful shutdown
--       */
--      const cleanup = async () => {
--        return await ErrorHandler.tryCatch(
--          async () => {
--            // Set state to shutting_down if not already
--            if (serverState.status !== 'shutting_down' && serverState.status !== 'shutdown') {
--              const oldStatus = serverState.status;
--              serverState.status = 'shutting_down';
--              serverEvents.emitStateChange(oldStatus, 'shutting_down');
--            }
--            
--            // Clean up all timers
--            for (const timer of timers) {
--              clearInterval(timer);
--              clearTimeout(timer);
--            }
--            
--            // Wait for active operations to complete (with timeout)
--            if (serverState.activeOperations.size > 0) {
--              serverLogger.info(`Waiting for ${serverState.activeOperations.size} active operations to complete...`);
--              
--              // In a real implementation, you might want to wait for operations to complete
--              // or implement a timeout mechanism
--            }
--            
--            // Close the server
--            if (server) {
--              await server.close();
--              serverLogger.info("Server closed successfully");
--            }
--            
--            // Set final state
--            serverState.status = 'shutdown';
--            
--            return true;
--          },
--          {
--            operation: 'Cleanup',
--            context: serverContext
--          }
--        );
--      };
--      
--      // Track operation for cleanup on shutdown
--      process.on('SIGINT', async () => {
--        serverLogger.info("Shutting down server due to SIGINT signal...");
--        await cleanup();
--        process.exit(0);
--      });
--      
--      process.on('SIGTERM', async () => {
--        serverLogger.info("Shutting down server due to SIGTERM signal...");
--        await cleanup();
--        process.exit(0);
--      });
--
-       // Register tools and resources in parallel with error handling
-       type RegistrationResult = {
-         success: boolean;
-@@ -393,6 +225,7 @@ export const createMcpServer = async () => {
-         name: string,
-         registerFn: () => Promise<void>
-       ): Promise<RegistrationResult> => {
-+        console.error(`Registering ${type}: ${name}`);
-         try {
-           await ErrorHandler.tryCatch(
-             async () => await registerFn(),
-@@ -410,13 +243,16 @@ export const createMcpServer = async () => {
-             serverState.registeredResources.add(name);
-           }
-           
-+          console.error(`Successfully registered ${type}: ${name}`);
-           return { success: true, type, name };
-         } catch (error) {
-+          console.error(`Failed to register ${type}: ${name}`, error);
-           return { success: false, type, name, error };
-         }
-       };
-       
-       // Register components with proper error handling
-+      console.error("Registering components...");
-       const registrationPromises: Promise<RegistrationResult>[] = [
-         registerComponent('tool', 'send_ntfy', () => registerNtfyTool(server!)),
-         registerComponent('resource', 'ntfy-resource', () => registerNtfyResource(server!)),
-@@ -442,125 +278,37 @@ export const createMcpServer = async () => {
-       
-       // Process failed registrations
-       if (failedRegistrations.length > 0) {
-+        console.error(`${failedRegistrations.length} registrations failed initially`, 
-+          failedRegistrations.map(f => `${f.type}:${f.name}`));
-+        
-         serverLogger.warn(`${failedRegistrations.length} registrations failed initially`, {
-           failedComponents: failedRegistrations.map(f => `${f.type}:${f.name}`) 
-         });
-+      }
-+
-+      // Add debug logs to diagnose the connection issue
-+      console.error("About to connect to stdio transport");
-+      
-+      try {
-+        // Connect using stdio transport
-+        const transport = new StdioServerTransport();
-+        console.error("Created StdioServerTransport instance");
-         
--        // Track failed registrations for potential retry
--        for (const failure of failedRegistrations) {
--          serverState.failedRegistrations.push({
--            type: failure.type,
--            name: failure.name,
--            error: failure.error || new Error('Unknown error during registration'),
--            attempts: 1
--          });
--        }
-+        // Set event handlers - using type assertion to avoid TS errors
-+        (server as any).onerror = (err: Error) => {
-+          console.error(`Server error: ${err.message}`);
-+        };
-         
--        // Update server status based on failures
--        updateServerStatus();
-+        // Skip setting onrequest since we don't have access to the type
-         
--        // Set up retry mechanism for failed registrations
--        if (serverState.failedRegistrations.length > 0) {
--          const retryInterval = setInterval(async () => {
--            await ErrorHandler.tryCatch(
--              async () => {
--                if (serverState.failedRegistrations.length === 0) {
--                  clearInterval(retryInterval);
--                  return;
--                }
--                
--                const retryable = serverState.failedRegistrations.filter(f => f.attempts < MAX_REGISTRATION_RETRIES);
--                if (retryable.length === 0) {
--                  serverLogger.warn("Maximum retry attempts reached for all failed registrations");
--                  clearInterval(retryInterval);
--                  return;
--                }
--                
--                serverLogger.info(`Attempting to retry ${retryable.length} failed registrations...`);
--                
--                // Retry each component
--                for (let i = 0; i < retryable.length; i++) {
--                  const failedReg = { ...retryable[i] }; // Get a copy to avoid mutation issues
--                  
--                  try {
--                    if (failedReg.type === 'tool' && failedReg.name === 'send_ntfy') {
--                      // Retry tool registration
--                      await registerNtfyTool(server!);
--                      serverState.registeredTools.add(failedReg.name);
--                      
--                      // Remove from failed list
--                      serverState.failedRegistrations = serverState.failedRegistrations.filter(
--                        f => !(f.type === 'tool' && f.name === failedReg.name)
--                      );
--                      
--                      serverLogger.info(`Successfully retried registration for tool: ${failedReg.name}`);
--                    } 
--                    else if (failedReg.type === 'resource' && failedReg.name === 'ntfy-resource') {
--                      // Retry resource registration
--                      await registerNtfyResource(server!);
--                      serverState.registeredResources.add(failedReg.name);
--                      
--                      // Remove from failed list
--                      serverState.failedRegistrations = serverState.failedRegistrations.filter(
--                        f => !(f.type === 'resource' && f.name === failedReg.name)
--                      );
--                      
--                      serverLogger.info(`Successfully retried registration for resource: ${failedReg.name}`);
--                    }
--                  } catch (error) {
--                    // Increment retry count
--                    const failedItem = serverState.failedRegistrations.find(
--                      f => f.type === failedReg.type && f.name === failedReg.name
--                    );
--                    
--                    if (failedItem) {
--                      failedItem.attempts++;
--                      failedItem.error = error;
--                    }
--                    
--                    serverLogger.error(`Retry failed for ${failedReg.type} ${failedReg.name}`, { 
--                      error: error instanceof Error ? error.message : String(error),
--                      attemptNumber: failedItem?.attempts
--                    });
--                  }
--                }
--                
--                // After retry attempts, update server status
--                updateServerStatus();
--              },
--              {
--                operation: 'RetryRegistrations',
--                context: serverContext
--              }
--            );
--          }, 30000); // Retry every 30 seconds
--          
--          // Ensure interval doesn't prevent process exit
--          retryInterval.unref();
--          // Track the interval for cleanup
--          timers.push(retryInterval);
--        }
-+        await server.connect(transport);
-+        console.error("Connected to transport successfully");
-+      } catch (error) {
-+        console.error("Error connecting to transport:", error);
-+        throw error;
-       }
--
--      // Connect using stdio transport
--      await server.connect(new StdioServerTransport());
--      
--      // Update server state
--      const oldStatus = serverState.status;
--      serverState.status = 'running';
--      serverEvents.emitStateChange(oldStatus, 'running');
-       
--      serverLogger.info("Server started and connected successfully", {
--        tools: Array.from(serverState.registeredTools),
--        resources: Array.from(serverState.registeredResources)
--      });
--
--      // Add event listener for graceful shutdown
--      serverEvents.on('state:shutting_down', () => cleanup());
--
--      // Run initial health check
--      await runHealthCheck();
--
-+      console.error("MCP server initialized and connected");
-       return server;
-     },
-     {
-@@ -579,11 +327,7 @@ export const createMcpServer = async () => {
-       )
-     }
-   ).catch((error) => {
--    // Clean up timers
--    for (const timer of timers) {
--      clearInterval(timer);
--      clearTimeout(timer);
--    }
-+    console.error("Fatal error in MCP server creation:", error);
-     
-     // Attempt to close server
-     if (server) {
-@@ -591,9 +335,7 @@ export const createMcpServer = async () => {
-         server.close();
-       } catch (closeError) {
-         // Already in error state, just log
--        serverLogger.debug("Error while closing server during error recovery", {
--          error: closeError instanceof Error ? closeError.message : String(closeError)
--        });
-+        console.error("Error while closing server during error recovery:", closeError);
-       }
-     }
-     
-diff --git a/src/mcp-server/tools/ntfyTool/index.ts b/src/mcp-server/tools/ntfyTool/index.ts
-index 80cb4b9..4e7d404 100644
---- a/src/mcp-server/tools/ntfyTool/index.ts
-+++ b/src/mcp-server/tools/ntfyTool/index.ts
-@@ -1,5 +1,5 @@
- import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
--import { getNtfyConfig } from "../../../config/envConfig.js";
-+import { config } from "../../../config/index.js";
- import { BaseErrorCode, McpError } from "../../../types-global/errors.js";
- import { ErrorHandler } from "../../../utils/errorHandler.js";
- import { logger } from "../../../utils/logger.js";
-@@ -42,7 +42,7 @@ export const registerNtfyTool = async (server: McpServer): Promise<void> => {
-       const schemaWithLatestConfig = SendNtfyToolInputSchema();
-       
-       // Log default topic info at registration time for verification
--      const ntfyConfig = getNtfyConfig();
-+      const ntfyConfig = config.ntfy;
-       toolLogger.info('Registering ntfy tool handler with config', {
-         defaultTopic: ntfyConfig.defaultTopic || '(not set)',
-         baseUrl: ntfyConfig.baseUrl,
-diff --git a/src/mcp-server/tools/ntfyTool/ntfyMessage.ts b/src/mcp-server/tools/ntfyTool/ntfyMessage.ts
-index 3bb1f3a..2c87974 100644
---- a/src/mcp-server/tools/ntfyTool/ntfyMessage.ts
-+++ b/src/mcp-server/tools/ntfyTool/ntfyMessage.ts
-@@ -1,7 +1,7 @@
- import { BaseErrorCode, McpError } from "../../../types-global/errors.js";
- import { ErrorHandler } from "../../../utils/errorHandler.js";
- import { publish, NtfyPublishOptions, NtfyPriority, validateTopicSync } from "../../../services/ntfy/index.js";
--import { getNtfyConfig, getRateLimit } from "../../../config/envConfig.js";
-+import { config } from "../../../config/index.js";
- import { SendNtfyToolInput, SendNtfyToolResponse, createSendNtfyToolSchema } from "./types.js";
- import { logger } from "../../../utils/logger.js";
- import { createRequestContext } from "../../../utils/requestContext.js";
-@@ -16,7 +16,7 @@ const ntfyToolLogger = logger.createChildLogger({
- });
- 
- // Create rate limiters for global and per-topic usage
--const rateLimit = getRateLimit();
-+const rateLimit = config.rateLimit;
- const globalRateLimiter = new RateLimiter({
-   windowMs: rateLimit.windowMs,
-   maxRequests: rateLimit.maxRequests,
-@@ -83,7 +83,7 @@ export const processNtfyMessage = async (
-       });
-       
-       // Get the ntfy config
--      const ntfyConfig = getNtfyConfig();
-+      const ntfyConfig = config.ntfy;
-       
-       // Use default topic from env if not provided
-       const finalTopic = topic || ntfyConfig.defaultTopic;
-@@ -315,7 +315,7 @@ export const processNtfyMessage = async (
-     {
-       operation: 'processNtfyMessage',
-       context: { 
--        topic: params.topic || getNtfyConfig().defaultTopic,
-+        topic: params.topic || config.ntfy.defaultTopic,
-         hasTitle: !!params.title
-       },
-       input: sanitizeInputForLogging(params),
-diff --git a/src/mcp-server/tools/ntfyTool/types.ts b/src/mcp-server/tools/ntfyTool/types.ts
-index 57ec677..96ef90f 100644
---- a/src/mcp-server/tools/ntfyTool/types.ts
-+++ b/src/mcp-server/tools/ntfyTool/types.ts
-@@ -1,5 +1,5 @@
- import { z } from 'zod';
--import { getNtfyConfig } from '../../../config/envConfig.js';
-+import { config } from '../../../config/index.js';
- import { logger } from '../../../utils/logger.js';
- import { createRequestContext } from '../../../utils/requestContext.js';
- import { sanitizeInput } from '../../../utils/sanitization.js';
-@@ -41,7 +41,7 @@ export function createSendNtfyToolSchema() {
-   schemaLogger.debug('Creating send_ntfy tool schema');
-   
-   // Get the latest configuration
--  const ntfyConfig = getNtfyConfig();
-+  const ntfyConfig = config.ntfy;
-   
-   // Process configuration values
-   const baseUrl = ntfyConfig.baseUrl || 'https://ntfy.sh';
-diff --git a/src/mcp-server/utils/registrationHelper.ts b/src/mcp-server/utils/registrationHelper.ts
-index a80df09..aac2476 100644
---- a/src/mcp-server/utils/registrationHelper.ts
-+++ b/src/mcp-server/utils/registrationHelper.ts
-@@ -113,4 +113,4 @@ export default {
-   registerComponent,
-   registerTool,
-   registerResource
--};
-\ No newline at end of file
-+};
-diff --git a/src/services/ntfy/publisher.ts b/src/services/ntfy/publisher.ts
-index af79771..cbd5a29 100644
---- a/src/services/ntfy/publisher.ts
-+++ b/src/services/ntfy/publisher.ts
-@@ -2,19 +2,19 @@
-  * Ntfy publisher implementation for sending notifications
-  */
- import { DEFAULT_NTFY_BASE_URL, DEFAULT_REQUEST_TIMEOUT, ERROR_MESSAGES } from './constants.js';
--import { NtfyConnectionError, NtfyInvalidTopicError, ntfyErrorMapper } from './errors.js';
-+import { NtfyAuthenticationError, NtfyConnectionError, NtfyInvalidTopicError, ntfyErrorMapper } from './errors.js';
- import { NtfyAction, NtfyAttachment, NtfyPriority } from './types.js';
- import { 
-   createTimeout, 
-   validateTopicSync, 
-   createRequestHeadersSync 
- } from './utils.js';
-+import { BaseErrorCode, McpError } from '../../types-global/errors.js';
- import { ErrorHandler } from '../../utils/errorHandler.js';
- import { logger } from '../../utils/logger.js';
- import { sanitizeInput, sanitizeInputForLogging } from '../../utils/sanitization.js';
- import { createRequestContext } from '../../utils/requestContext.js';
- import { idGenerator } from '../../utils/idGenerator.js';
--import { BaseErrorCode } from '../../types-global/errors.js';
- 
- // Create a module-specific logger
- const publisherLogger = logger.createChildLogger({ 
-@@ -260,10 +260,44 @@ export async function publish(
-             url,
-             requestId: requestCtx.requestId
-           });
--          throw new NtfyConnectionError(
--            `HTTP Error: ${response.status} ${response.statusText}`,
--            url
--          );
-+          
-+          // Provide more specific error messages based on status code
-+          let errorMessage = `HTTP Error: ${response.status} ${response.statusText}`;
-+          
-+          switch (response.status) {
-+            case 401:
-+              errorMessage = 'Authentication failed: invalid credentials';
-+              throw new NtfyAuthenticationError(errorMessage);
-+            case 403:
-+              errorMessage = 'Access forbidden: insufficient permissions';
-+              throw new McpError(
-+                BaseErrorCode.FORBIDDEN, 
-+                errorMessage, 
-+                { url, statusCode: response.status }
-+              );
-+            case 404:
-+              errorMessage = 'Topic or resource not found';
-+              throw new McpError(
-+                BaseErrorCode.NOT_FOUND, 
-+                errorMessage, 
-+                { url, statusCode: response.status, topic }
-+              );
-+            case 429:
-+              errorMessage = 'Too many requests: rate limit exceeded';
-+              throw new McpError(
-+                BaseErrorCode.RATE_LIMITED, 
-+                errorMessage, 
-+                { url, statusCode: response.status }
-+              );
-+            case 500:
-+            case 502:
-+            case 503:
-+            case 504:
-+              errorMessage = `Server error: ${response.statusText}`;
-+              // Fall through to default error handling
-+            default:
-+              throw new NtfyConnectionError(errorMessage, url);
-+          }
-         }
- 
-         // Parse response
-@@ -308,4 +342,4 @@ export async function publish(
-       rethrow: true
-     }
-   );
--}
-\ No newline at end of file
-+}
-diff --git a/src/services/ntfy/subscriber.ts b/src/services/ntfy/subscriber.ts
-index 3f3f3bf..4938827 100644
---- a/src/services/ntfy/subscriber.ts
-+++ b/src/services/ntfy/subscriber.ts
-@@ -352,16 +352,52 @@ export class NtfySubscriber {
-         this.connectionActive = false;
-         this.logger.error('Error reading from stream', {
-           error: error instanceof Error ? error.message : String(error),
-+          errorType: error instanceof Error ? error.name : typeof error,
-           requestId
-         });
-         
--        if (error instanceof Error && error.name === 'AbortError') {
--          throw new NtfySubscriptionClosedError('Subscription aborted');
--        } else {
--          throw new NtfyConnectionError(
--            `Error reading from stream: ${error instanceof Error ? error.message : String(error)}`
--          );
-+        // Handle various error types more specifically
-+        if (error instanceof Error) {
-+          // AbortError - intentional close
-+          if (error.name === 'AbortError') {
-+            throw new NtfySubscriptionClosedError('Subscription aborted');
-+          }
-+          
-+          // Network errors
-+          if (
-+            error.name === 'NetworkError' || 
-+            error.name === 'TypeError' ||
-+            error.message.includes('network') ||
-+            error.message.includes('connection')
-+          ) {
-+            const connectionError = new NtfyConnectionError(
-+              `Network error during stream processing: ${error.message}`
-+            );
-+            // Add additional context to the error details
-+            connectionError.details = { 
-+              originalError: error.name,
-+              originalMessage: error.message
-+            };
-+            throw connectionError;
-+          }
-+          
-+          // Timeout errors
-+          if (
-+            error.name === 'TimeoutError' ||
-+            error.message.includes('timeout') ||
-+            error.message.includes('timed out')
-+          ) {
-+            throw new NtfyTimeoutError(
-+              `Stream reading timed out: ${error.message}`,
-+              DEFAULT_REQUEST_TIMEOUT
-+            );
-+          }
-         }
-+        
-+        // Default case - generic connection error
-+        throw new NtfyConnectionError(
-+          `Error reading from stream: ${error instanceof Error ? error.message : String(error)}`
-+        );
-       }
-     }
-   }
-@@ -565,13 +601,22 @@ export class NtfySubscriber {
-     });
-     
-     this.reconnectAttempts++;
--    const delay = RECONNECT_DELAY * this.reconnectAttempts;
-+    
-+    // Add jitter to prevent thundering herd problem
-+    // and cap at a maximum delay of 30 seconds
-+    const MAX_BACKOFF_DELAY = 30000; // 30 seconds
-+    const baseDelay = RECONNECT_DELAY * this.reconnectAttempts;
-+    const jitter = Math.floor(Math.random() * 1000); // Add up to 1 second of jitter
-+    const delay = Math.min(baseDelay + jitter, MAX_BACKOFF_DELAY);
-     
-     this.logger.info('Scheduling reconnection attempt', {
-       topic,
-       attemptNumber: this.reconnectAttempts,
-       maxAttempts: MAX_RECONNECT_ATTEMPTS,
--      delayMs: delay,
-+      baseDelay: baseDelay,
-+      jitter: jitter,
-+      actualDelay: delay,
-+      maxBackoff: MAX_BACKOFF_DELAY,
-       requestId: requestCtx.requestId
-     });
-     
-@@ -589,4 +634,4 @@ export class NtfySubscriber {
-       }
-     }, delay);
-   }
--}
-\ No newline at end of file
-+}
-diff --git a/src/types-global/errors.ts b/src/types-global/errors.ts
-index 5adf1a5..98a3ecf 100644
---- a/src/types-global/errors.ts
-+++ b/src/types-global/errors.ts
-@@ -2,18 +2,20 @@ import { z } from "zod";
- import { McpContent, McpToolResponse } from "./mcp.js";
- 
- // Base error codes that all tools can use
--export enum BaseErrorCode {
--  UNAUTHORIZED = 'UNAUTHORIZED',
--  FORBIDDEN = 'FORBIDDEN',
--  NOT_FOUND = 'NOT_FOUND',
--  CONFLICT = 'CONFLICT',
--  VALIDATION_ERROR = 'VALIDATION_ERROR',
--  RATE_LIMITED = 'RATE_LIMITED',
--  TIMEOUT = 'TIMEOUT',
--  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',
--  INTERNAL_ERROR = 'INTERNAL_ERROR',
--  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
--}
-+export const BaseErrorCode = {
-+  UNAUTHORIZED: 'UNAUTHORIZED',
-+  FORBIDDEN: 'FORBIDDEN',
-+  NOT_FOUND: 'NOT_FOUND',
-+  CONFLICT: 'CONFLICT',
-+  VALIDATION_ERROR: 'VALIDATION_ERROR',
-+  RATE_LIMITED: 'RATE_LIMITED',
-+  TIMEOUT: 'TIMEOUT',
-+  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
-+  INTERNAL_ERROR: 'INTERNAL_ERROR',
-+  UNKNOWN_ERROR: 'UNKNOWN_ERROR'
-+} as const;
-+
-+export type BaseErrorCode = typeof BaseErrorCode[keyof typeof BaseErrorCode];
- 
- // Base MCP error class
- export class McpError extends Error {
-@@ -48,4 +50,4 @@ export const ErrorSchema = z.object({
-   details: z.record(z.unknown()).optional()
- });
- 
--export type ErrorResponse = z.infer<typeof ErrorSchema>;
-\ No newline at end of file
-+export type ErrorResponse = z.infer<typeof ErrorSchema>;
-diff --git a/src/utils/index.ts b/src/utils/index.ts
-index 2847875..29e5916 100644
---- a/src/utils/index.ts
-+++ b/src/utils/index.ts
-@@ -6,20 +6,20 @@ export * from './logger.js';
- export * from './rateLimiter.js';
- export * from './sanitization.js';
- 
--// Import default exports
--import requestContext from './requestContext.js';
--import errorHandler from './errorHandler.js';
--import idGenerator from './idGenerator.js';
--import logger from './logger.js';
--import rateLimiter from './rateLimiter.js';
--import sanitization from './sanitization.js';
-+// Import named exports to re-export
-+import { default as requestContext } from './requestContext.js';
-+import { default as errorHandler } from './errorHandler.js'; 
-+import { default as idGenerator } from './idGenerator.js';
-+import { logger } from './logger.js';
-+import { default as rateLimiter } from './rateLimiter.js';
-+import { default as sanitization } from './sanitization.js';
- 
--// Export combined default
--export default {
-+// Export frequently used utilities directly
-+export { 
-   requestContext,
-   errorHandler,
-   idGenerator,
-   logger,
-   rateLimiter,
-   sanitization
--};
-\ No newline at end of file
-+};
-diff --git a/src/utils/logger.ts b/src/utils/logger.ts
-index e467757..565caf9 100644
---- a/src/utils/logger.ts
-+++ b/src/utils/logger.ts
-@@ -1,478 +1,138 @@
--import fs from 'fs';
--import path from 'path';
--import winston from 'winston';
--import 'winston-daily-rotate-file';
--import { BaseErrorCode, McpError } from '../types-global/errors.js';
--
--/**
-- * Supported log levels
-- */
--export type LogLevel = 'debug' | 'info' | 'warn' | 'error';
--
--/**
-- * Log format types
-- */
--export type LogFormat = 'json' | 'simple' | 'detailed';
--
--/**
-- * Logger configuration options
-- */
--export interface LoggerConfig {
--  /** Log level (debug, info, warn, error) */
--  level?: LogLevel;
--  /** Directory for log files */
--  logDir?: string;
--  /** Format for log output */
--  format?: LogFormat;
--  /** Whether to log to files */
--  files?: boolean;
--  /** Log rotation settings */
--  rotation?: {
--    /** Enable log file rotation */
--    enabled?: boolean;
--    /** Maximum size of each log file before rotation (e.g., "10m", "1g") */
--    maxSize?: string;
--    /** Maximum number of files to keep */
--    maxFiles?: number;
--  };
--  /** Sensitive data fields that should be redacted from logs */
--  sensitiveFields?: string[];
--}
-+import fs from "fs";
-+import path from "path";
-+import { fileURLToPath } from "url";
-+import winston from "winston";
-+
-+type LogLevel = "debug" | "info" | "warn" | "error";
-+
-+export type ChildLogger = {
-+  debug: (message: string, context?: Record<string, unknown>) => void;
-+  info: (message: string, context?: Record<string, unknown>) => void;
-+  warn: (message: string, context?: Record<string, unknown>) => void;
-+  error: (message: string, context?: Record<string, unknown>) => void;
-+};
- 
--/**
-- * Logger error that should cause termination
-- */
--export class LoggerError extends McpError {
--  constructor(message: string, details?: Record<string, unknown>) {
--    super(BaseErrorCode.INTERNAL_ERROR, message, details);
--    this.name = 'LoggerError';
--  }
--}
-+// Handle ESM module dirname
-+const __filename = fileURLToPath(import.meta.url);
-+const __dirname = path.dirname(__filename);
- 
--/**
-- * Default configuration values
-- */
--const DEFAULT_CONFIG: LoggerConfig = {
--  level: 'info',
--  logDir: undefined, // Will be set based on env var, no default
--  format: 'detailed',
--  files: true,
--  rotation: {
--    enabled: true,
--    maxSize: '50m',
--    maxFiles: 10
--  },
--  sensitiveFields: [
--    'password', 'token', 'secret', 'key', 'apiKey', 'auth', 
--    'credential', 'jwt', 'ssn', 'credit', 'card', 'cvv', 'authorization'
--  ]
--};
-+// Resolve logs directory relative to project root (2 levels up from utils/)
-+const projectRoot = path.resolve(__dirname, '..', '..');
-+const logsDir = path.join(projectRoot, 'logs');
- 
--/**
-- * Generic Logger class with configuration options
-- * Implements the Singleton pattern for consistent logging across the application
-- */
--export class Logger {
-+class Logger {
-   private static instance: Logger;
-   private logger: winston.Logger;
--  private config: LoggerConfig;
--  
--  /**
--   * Private constructor (use getInstance instead)
--   * @param config Initial logger configuration
--   */
--  private constructor(config: LoggerConfig = {}) {
--    // Merge provided config with defaults
--    this.config = this.mergeConfig(DEFAULT_CONFIG, config);
--    
--    // Initialize with a silent logger - no console output
--    this.logger = winston.createLogger({
--      silent: true,
--      transports: []
--    });
-+
-+  private constructor() {
-+    const logLevel = (process.env.LOG_LEVEL as LogLevel) || "info";
-     
--    // Only attempt file logging if LOG_FILE_DIR env var is set
--    if (process.env.LOG_FILE_DIR) {
--      try {
--        this.setupFileLogging();
--      } catch (error) {
--        // Silent fail - no console.log
--      }
-+    // Ensure logs directory exists
-+    if (!fs.existsSync(logsDir)) {
-+      fs.mkdirSync(logsDir, { recursive: true });
-     }
--  }
- 
--  /**
--   * Merge configurations with proper handling of nested objects
--   */
--  private mergeConfig(defaultConfig: LoggerConfig, userConfig: LoggerConfig): LoggerConfig {
--    return {
--      ...defaultConfig,
--      ...userConfig,
--      rotation: {
--        ...defaultConfig.rotation,
--        ...userConfig.rotation
--      },
--      sensitiveFields: [
--        ...(defaultConfig.sensitiveFields || []),
--        ...(userConfig.sensitiveFields || [])
-+    // Common format for all transports
-+    const commonFormat = winston.format.combine(
-+      winston.format.timestamp(),
-+      winston.format.errors({ stack: true }),
-+      winston.format.printf(({ timestamp, level, message, context, stack }) => {
-+        const contextStr = context ? `\n  Context: ${JSON.stringify(context, null, 2)}` : "";
-+        const stackStr = stack ? `\n  Stack: ${stack}` : "";
-+        return `[${timestamp}] ${level}: ${message}${contextStr}${stackStr}`;
-+      })
-+    );
-+
-+    this.logger = winston.createLogger({
-+      level: logLevel,
-+      format: winston.format.json(),
-+      transports: [
-+        // Combined log file for all levels
-+        new winston.transports.File({
-+          filename: path.join(logsDir, 'combined.log'),
-+          format: commonFormat
-+        }),
-+        // Separate log files for each level
-+        new winston.transports.File({
-+          filename: path.join(logsDir, 'error.log'),
-+          level: 'error',
-+          format: commonFormat
-+        }),
-+        new winston.transports.File({
-+          filename: path.join(logsDir, 'warn.log'),
-+          level: 'warn',
-+          format: commonFormat
-+        }),
-+        new winston.transports.File({
-+          filename: path.join(logsDir, 'info.log'),
-+          level: 'info',
-+          format: commonFormat
-+        }),
-+        new winston.transports.File({
-+          filename: path.join(logsDir, 'debug.log'),
-+          level: 'debug',
-+          format: commonFormat
-+        })
-       ]
--    };
-+    });
-   }
- 
--  /**
--   * Get or create the singleton logger instance
--   * @param config Optional configuration to override defaults
--   * @returns The logger instance
--   */
--  public static getInstance(config?: LoggerConfig): Logger {
-+  public static getInstance(): Logger {
-     if (!Logger.instance) {
--      Logger.instance = new Logger(config);
--    } else if (config) {
--      // Update configuration if provided
--      Logger.instance.configure(config);
-+      Logger.instance = new Logger();
-     }
-     return Logger.instance;
-   }
- 
--  /**
--   * Updates logger configuration
--   * @param config New configuration options
--   */
--  public configure(config: LoggerConfig): void {
--    this.config = this.mergeConfig(this.config, config);
--    
--    // Only reconfigure file logging if LOG_FILE_DIR is set
--    if (process.env.LOG_FILE_DIR) {
--      try {
--        this.setupFileLogging();
--      } catch (error) {
--        // Silent fail - no console.log
--      }
--    }
-+  public debug(message: string, context?: Record<string, unknown>) {
-+    this.logger.debug(message, { context });
-   }
- 
--  /**
--   * Set up file-based logging with proper error handling
--   */
--  private setupFileLogging(): void {
--    // Only use LOG_FILE_DIR from environment
--    const logDirPath = process.env.LOG_FILE_DIR;
--    
--    if (!logDirPath) {
--      return;
--    }
--    
--    // Create log directory if it doesn't exist
--    try {
--      if (!fs.existsSync(logDirPath)) {
--        fs.mkdirSync(logDirPath, { recursive: true });
--      }
--    } catch (error) {
--      // Silent fail - no console.log
--      return;
--    }
--    
--    // Create log format based on configuration
--    const logFormat = this.createLogFormat(this.config.format);
--    
--    // Create new logger with file transports - no console transport
--    const transports: winston.transport[] = [];
--    
--    if (this.config.rotation?.enabled) {
--      // Use daily rotate file transport if rotation is enabled
--      const dailyRotateOpts = {
--        dirname: logDirPath,
--        datePattern: 'YYYY-MM-DD',
--        maxSize: this.config.rotation.maxSize,
--        maxFiles: this.config.rotation.maxFiles,
--        format: logFormat
--      };
--      
--      try {
--        // Combined logs
--        const combinedTransport = new winston.transports.DailyRotateFile({
--          ...dailyRotateOpts,
--          filename: 'combined-%DATE%.log'
--        });
--        transports.push(combinedTransport);
--        
--        // Error logs
--        const errorTransport = new winston.transports.DailyRotateFile({
--          ...dailyRotateOpts,
--          filename: 'error-%DATE%.log',
--          level: 'error'
--        });
--        transports.push(errorTransport);
--      } catch (error) {
--        // Silent fail - no console.log
--      }
--    } else {
--      // Standard file logging without rotation
--      try {
--        // Combined logs
--        const combinedTransport = new winston.transports.File({
--          filename: path.join(logDirPath, 'combined.log'),
--          format: logFormat
--        });
--        transports.push(combinedTransport);
--        
--        // Error logs
--        const errorTransport = new winston.transports.File({
--          filename: path.join(logDirPath, 'error.log'),
--          level: 'error',
--          format: logFormat
--        });
--        transports.push(errorTransport);
--      } catch (error) {
--        // Silent fail - no console.log
--      }
--    }
--    
--    // If we have transports, create a proper logger
--    if (transports.length > 0) {
--      this.logger = winston.createLogger({
--        level: this.config.level || DEFAULT_CONFIG.level,
--        format: winston.format.combine(
--          winston.format.timestamp(),
--          winston.format(this.sanitizeSensitiveData.bind(this))(),
--          winston.format.json()
--        ),
--        defaultMeta: { service: 'mcp-service' },
--        transports,
--        silent: false,
--        exitOnError: false
--      });
--    }
-+  public info(message: string, context?: Record<string, unknown>) {
-+    this.logger.info(message, { context });
-   }
- 
--  /**
--   * Create the appropriate log format based on configuration
--   */
--  private createLogFormat(format: LogFormat = 'detailed'): winston.Logform.Format {
--    switch (format) {
--      case 'json':
--        return winston.format.combine(
--          winston.format.timestamp(),
--          winston.format.json()
--        );
--        
--      case 'simple':
--        return winston.format.combine(
--          winston.format.timestamp(),
--          winston.format.printf(({ timestamp, level, message }) => {
--            return `[${timestamp}] ${level}: ${message}`;
--          })
--        );
--        
--      case 'detailed':
--      default:
--        return winston.format.combine(
--          winston.format.timestamp(),
--          winston.format.errors({ stack: true }),
--          winston.format.printf(({ timestamp, level, message, context, stack }) => {
--            const contextStr = context ? `\n  Context: ${JSON.stringify(context, null, 2)}` : '';
--            const stackStr = stack ? `\n  Stack: ${stack}` : '';
--            return `[${timestamp}] ${level}: ${message}${contextStr}${stackStr}`;
--          })
--        );
--    }
-+  public warn(message: string, context?: Record<string, unknown>) {
-+    this.logger.warn(message, { context });
-   }
- 
--  /**
--   * Sanitize sensitive data in logs
--   */
--  private sanitizeSensitiveData(info: any): any {
--    if (!info || typeof info !== 'object') {
--      return info;
--    }
--    
--    // Get sensitive fields from config
--    const sensitiveFields = this.config.sensitiveFields || DEFAULT_CONFIG.sensitiveFields || [];
--    
--    // Create deep copy to avoid modifying the original
--    const sanitized = { ...info };
--    
--    // Sanitize context if it exists
--    if (sanitized.context && typeof sanitized.context === 'object') {
--      sanitized.context = this.redactSensitiveFields(sanitized.context, sensitiveFields);
--    }
--    
--    return sanitized;
--  }
--  
--  /**
--   * Recursively redact sensitive fields in an object
--   */
--  private redactSensitiveFields(obj: any, sensitiveFields: string[]): any {
--    if (!obj || typeof obj !== 'object') {
--      return obj;
--    }
--    
--    // Handle arrays
--    if (Array.isArray(obj)) {
--      return obj.map(item => this.redactSensitiveFields(item, sensitiveFields));
--    }
--    
--    // Handle regular objects
--    const result: Record<string, any> = {};
--    
--    for (const [key, value] of Object.entries(obj)) {
--      // Check if this key matches any sensitive field pattern
--      const isSensitive = sensitiveFields.some(field => 
--        key.toLowerCase().includes(field.toLowerCase())
--      );
--      
--      if (isSensitive) {
--        // Redact sensitive value
--        result[key] = '[REDACTED]';
--      } else if (value && typeof value === 'object') {
--        // Recursively process nested objects
--        result[key] = this.redactSensitiveFields(value, sensitiveFields);
--      } else {
--        // Pass through non-sensitive values
--        result[key] = value;
--      }
--    }
--    
--    return result;
--  }
--
--  /**
--   * Log a debug message - no-op if logger is not configured
--   */
--  public debug(message: string, context?: Record<string, unknown>): void {
--    try {
--      this.logger.debug(message, { context });
--    } catch (error) {
--      // Silent fail
--    }
--  }
--
--  /**
--   * Log an info message - no-op if logger is not configured
--   */
--  public info(message: string, context?: Record<string, unknown>): void {
--    try {
--      this.logger.info(message, { context });
--    } catch (error) {
--      // Silent fail
--    }
--  }
--
--  /**
--   * Log a warning message - no-op if logger is not configured
--   */
--  public warn(message: string, context?: Record<string, unknown>): void {
--    try {
--      this.logger.warn(message, { context });
--    } catch (error) {
--      // Silent fail
--    }
--  }
--
--  /**
--   * Log an error message - no-op if logger is not configured
--   */
--  public error(message: string, context?: Record<string, unknown>): void {
--    try {
--      this.logger.error(message, { context });
--    } catch (error) {
--      // Silent fail
--    }
--  }
--
--  /**
--   * Log an exception with full stack trace - no-op if logger is not configured
--   */
--  public exception(message: string, error: Error, context?: Record<string, unknown>): void {
--    try {
--      this.logger.error(message, {
--        context,
--        stack: error.stack,
--        error: {
--          name: error.name,
--          message: error.message
--        }
--      });
--    } catch (error) {
--      // Silent fail
--    }
-+  public error(message: string, context?: Record<string, unknown>) {
-+    this.logger.error(message, { context });
-   }
- 
--  /**
--   * Create a child logger with additional default context
--   */
--  public createChildLogger(defaultContext: Record<string, unknown>): ChildLogger {
--    return new ChildLogger(this, defaultContext);
--  }
--  
--  /**
--   * Dispose logger resources
--   */
--  public dispose(): void {
--    try {
--      this.logger.close();
--    } catch (error) {
--      // Silent fail
--    }
--  }
--}
--
--/**
-- * Child logger that includes default context with all log messages
-- */
--export class ChildLogger {
--  /**
--   * Create a new child logger
--   */
--  constructor(
--    private parent: Logger,
--    private defaultContext: Record<string, unknown>
--  ) {}
--
--  /**
--   * Merge provided context with default context
--   */
--  private mergeContext(context?: Record<string, unknown>): Record<string, unknown> {
-+  public createChildLogger(metadata: { 
-+    module: string; 
-+    service?: string;
-+    serviceId?: string;
-+    componentName?: string;
-+    subscriberId?: string;
-+    component?: string;
-+    requestId?: string;
-+    subscriptionTime?: string;
-+    environment?: string;
-+    serverId?: string;
-+    [key: string]: any; // Allow any additional properties for backward compatibility
-+  }): {
-+    debug: (message: string, context?: Record<string, unknown>) => void;
-+    info: (message: string, context?: Record<string, unknown>) => void;
-+    warn: (message: string, context?: Record<string, unknown>) => void;
-+    error: (message: string, context?: Record<string, unknown>) => void;
-+  } {
-     return {
--      ...this.defaultContext,
--      ...context
-+      debug: (message: string, context?: Record<string, unknown>) => {
-+        this.debug(`[${metadata.module}] ${message}`, context);
-+      },
-+      info: (message: string, context?: Record<string, unknown>) => {
-+        this.info(`[${metadata.module}] ${message}`, context);
-+      },
-+      warn: (message: string, context?: Record<string, unknown>) => {
-+        this.warn(`[${metadata.module}] ${message}`, context);
-+      },
-+      error: (message: string, context?: Record<string, unknown>) => {
-+        this.error(`[${metadata.module}] ${message}`, context);
-+      }
-     };
-   }
--
--  public debug(message: string, context?: Record<string, unknown>): void {
--    this.parent.debug(message, this.mergeContext(context));
--  }
--
--  public info(message: string, context?: Record<string, unknown>): void {
--    this.parent.info(message, this.mergeContext(context));
--  }
--
--  public warn(message: string, context?: Record<string, unknown>): void {
--    this.parent.warn(message, this.mergeContext(context));
--  }
--
--  public error(message: string, context?: Record<string, unknown>): void {
--    this.parent.error(message, this.mergeContext(context));
--  }
--
--  public exception(message: string, error: Error, context?: Record<string, unknown>): void {
--    this.parent.exception(message, error, this.mergeContext(context));
--  }
- }
- 
--/**
-- * Create and export the default logger instance - silent unless LOG_FILE_DIR is set
-- */
--export const logger = Logger.getInstance({
--  level: (process.env.LOG_LEVEL as LogLevel) || 'info',
--  files: true,
--  format: 'detailed',
--  rotation: {
--    enabled: true,
--    maxSize: '50m',
--    maxFiles: 10
--  }
--});
--
--export default logger;
-+export const logger = Logger.getInstance();
-diff --git a/src/utils/rateLimiter.ts b/src/utils/rateLimiter.ts
-index 26d751e..e6937fb 100644
---- a/src/utils/rateLimiter.ts
-+++ b/src/utils/rateLimiter.ts
-@@ -45,6 +45,8 @@ export interface RateLimitEntry {
-   count: number;
-   /** When the window resets (timestamp) */
-   resetTime: number;
-+  /** Key for this entry, stored for faster deletion */
-+  key: string;
- }
- 
- /**
-@@ -181,9 +183,10 @@ export class RateLimiter {
-       
-       // Create new entry or reset if expired
-       if (!entry || now >= entry.resetTime) {
--        const newEntry = {
-+        const newEntry: RateLimitEntry = {
-           count: 1,
--          resetTime: now + this.config.windowMs
-+          resetTime: now + this.config.windowMs,
-+          key: limitKey
-         };
-         this.limits.set(limitKey, newEntry);
-         return newEntry;
-@@ -257,4 +260,4 @@ export const rateLimiter = new RateLimiter({
- export default {
-   RateLimiter,
-   rateLimiter
--};
-\ No newline at end of file
-+};
-diff --git a/tsconfig.json b/tsconfig.json
-index 6a6c2d3..507aef8 100644
---- a/tsconfig.json
-+++ b/tsconfig.json
-@@ -1,16 +1,15 @@
- {
-   "compilerOptions": {
-     "target": "ES2020",
--    "module": "NodeNext",
--    "moduleResolution": "NodeNext",
-+    "module": "ESNext",
-+    "moduleResolution": "node",
-     "esModuleInterop": true,
-+    "strict": true,
-     "outDir": "./dist",
-     "rootDir": "./src",
--    "strict": true,
-     "declaration": true,
--    "sourceMap": true,
--    "forceConsistentCasingInFileNames": true,
--    "resolveJsonModule": true
-+    "skipLibCheck": true,
-+    "forceConsistentCasingInFileNames": true
-   },
-   "include": ["src/**/*"],
-   "exclude": ["node_modules", "dist"]
-diff --git a/tsconfig.scripts.json b/tsconfig.scripts.json
-deleted file mode 100644
-index 56e2281..0000000
---- a/tsconfig.scripts.json
-+++ /dev/null
-@@ -1,16 +0,0 @@
--{
--  "compilerOptions": {
--    "target": "ES2020",
--    "module": "NodeNext",
--    "moduleResolution": "NodeNext",
--    "esModuleInterop": true,
--    "outDir": "./dist/scripts",
--    "rootDir": "./scripts",
--    "strict": true,
--    "sourceMap": true,
--    "forceConsistentCasingInFileNames": true,
--    "resolveJsonModule": true
--  },
--  "include": ["scripts/**/*"],
--  "exclude": ["node_modules", "dist"]
--}
-\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index b29d06b..c4dc7cc 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,25 +1,25 @@
 {
   "name": "ntfy-mcp-server",
-  "version": "1.0.0",
+  "version": "1.0.2",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
       "name": "ntfy-mcp-server",
-      "version": "1.0.0",
+      "version": "1.0.2",
       "license": "Apache-2.0",
       "dependencies": {
-        "@modelcontextprotocol/sdk": "^1.8.0",
-        "@types/node": "^22.13.14",
-        "@types/sanitize-html": "^2.13.0",
-        "@types/validator": "^13.12.3",
+        "@modelcontextprotocol/sdk": "^1.10.2",
+        "@types/node": "^22.14.1",
+        "@types/sanitize-html": "^2.15.0",
+        "@types/validator": "^13.15.0",
         "@types/xss-filters": "^1.2.0",
-        "dotenv": "^16.4.7",
+        "dotenv": "^16.5.0",
         "path-normalize": "^6.0.13",
-        "sanitize-html": "^2.15.0",
+        "sanitize-html": "^2.16.0",
         "ts-node": "^10.9.2",
-        "typescript": "^5.8.2",
-        "undici-types": "^7.5.0",
+        "typescript": "^5.8.3",
+        "undici-types": "^7.8.0",
         "validator": "^13.15.0",
         "winston": "^3.17.0",
         "winston-daily-rotate-file": "^5.0.0",
@@ -84,9 +84,9 @@
       }
     },
     "node_modules/@modelcontextprotocol/sdk": {
-      "version": "1.8.0",
-      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.8.0.tgz",
-      "integrity": "sha512-e06W7SwrontJDHwCawNO5SGxG+nU9AAx+jpHHZqGl/WrDBdWOpvirC+s58VpJTB5QemI4jTRcjWT4Pt3Q1NPQQ==",
+      "version": "1.10.2",
+      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.10.2.tgz",
+      "integrity": "sha512-rb6AMp2DR4SN+kc6L1ta2NCpApyA9WYNx3CrTSZvGxq9wH71bRur+zRqPfg0vQ9mjywR7qZdX2RGHOPq3ss+tA==",
       "license": "MIT",
       "dependencies": {
         "content-type": "^1.0.5",
@@ -95,7 +95,7 @@
         "eventsource": "^3.0.2",
         "express": "^5.0.1",
         "express-rate-limit": "^7.5.0",
-        "pkce-challenge": "^4.1.0",
+        "pkce-challenge": "^5.0.0",
         "raw-body": "^3.0.0",
         "zod": "^3.23.8",
         "zod-to-json-schema": "^3.24.1"
@@ -129,24 +129,24 @@
       "license": "MIT"
     },
     "node_modules/@types/node": {
-      "version": "22.13.14",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.14.tgz",
-      "integrity": "sha512-Zs/Ollc1SJ8nKUAgc7ivOEdIBM8JAKgrqqUYi2J997JuKO7/tpQC+WCetQ1sypiKCQWHdvdg9wBNpUPEWZae7w==",
+      "version": "22.14.1",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.14.1.tgz",
+      "integrity": "sha512-u0HuPQwe/dHrItgHHpmw3N2fYCR6x4ivMNbPHRkBVP4CvN+kiRrKHWk3i8tXiO/joPwXLMYvF9TTF0eqgHIuOw==",
       "license": "MIT",
       "dependencies": {
-        "undici-types": "~6.20.0"
+        "undici-types": "~6.21.0"
       }
     },
     "node_modules/@types/node/node_modules/undici-types": {
-      "version": "6.20.0",
-      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
-      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
+      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
       "license": "MIT"
     },
     "node_modules/@types/sanitize-html": {
-      "version": "2.13.0",
-      "resolved": "https://registry.npmjs.org/@types/sanitize-html/-/sanitize-html-2.13.0.tgz",
-      "integrity": "sha512-X31WxbvW9TjIhZZNyNBZ/p5ax4ti7qsNDBDEnH4zAgmEh35YnFD1UiS6z9Cd34kKm0LslFW0KPmTQzu/oGtsqQ==",
+      "version": "2.15.0",
+      "resolved": "https://registry.npmjs.org/@types/sanitize-html/-/sanitize-html-2.15.0.tgz",
+      "integrity": "sha512-71Z6PbYsVKfp4i6Jvr37s5ql6if1Q/iJQT80NbaSi7uGaG8CqBMXP0pk/EsURAOuGdk5IJCd/vnzKrR7S3Txsw==",
       "license": "MIT",
       "dependencies": {
         "htmlparser2": "^8.0.0"
@@ -159,9 +159,9 @@
       "license": "MIT"
     },
     "node_modules/@types/validator": {
-      "version": "13.12.3",
-      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.12.3.tgz",
-      "integrity": "sha512-2ipwZ2NydGQJImne+FhNdhgRM37e9lCev99KnqkbFHd94Xn/mErARWI1RSLem1QA19ch5kOhzIZd7e8CA2FI8g==",
+      "version": "13.15.0",
+      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.15.0.tgz",
+      "integrity": "sha512-nh7nrWhLr6CBq9ldtw0wx+z9wKnnv/uTVLA9g/3/TcOYxbpOSZE+MhKPmWqU+K0NvThjhv12uD8MuqijB0WzEA==",
       "license": "MIT"
     },
     "node_modules/@types/xss-filters": {
@@ -220,16 +220,16 @@
       "license": "MIT"
     },
     "node_modules/body-parser": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.1.0.tgz",
-      "integrity": "sha512-/hPxh61E+ll0Ujp24Ilm64cykicul1ypfwjVttduAiEdtnJFvLePSrIPk+HMImtNv5270wOGCb1Tns2rybMkoQ==",
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz",
+      "integrity": "sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==",
       "license": "MIT",
       "dependencies": {
         "bytes": "^3.1.2",
         "content-type": "^1.0.5",
         "debug": "^4.4.0",
         "http-errors": "^2.0.0",
-        "iconv-lite": "^0.5.2",
+        "iconv-lite": "^0.6.3",
         "on-finished": "^2.4.1",
         "qs": "^6.14.0",
         "raw-body": "^3.0.0",
@@ -239,44 +239,6 @@
         "node": ">=18"
       }
     },
-    "node_modules/body-parser/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/body-parser/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
-    "node_modules/body-parser/node_modules/qs": {
-      "version": "6.14.0",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
-      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "side-channel": "^1.1.0"
-      },
-      "engines": {
-        "node": ">=0.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/bytes": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
@@ -382,9 +344,9 @@
       }
     },
     "node_modules/cookie": {
-      "version": "0.7.1",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
-      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
+      "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
+      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
       "license": "MIT",
       "engines": {
         "node": ">= 0.6"
@@ -433,12 +395,12 @@
       }
     },
     "node_modules/debug": {
-      "version": "4.3.6",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
-      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
+      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
       "license": "MIT",
       "dependencies": {
-        "ms": "2.1.2"
+        "ms": "^2.1.3"
       },
       "engines": {
         "node": ">=6.0"
@@ -467,16 +429,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/destroy": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
-      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8",
-        "npm": "1.2.8000 || >= 1.4.16"
-      }
-    },
     "node_modules/diff": {
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
@@ -542,9 +494,9 @@
       }
     },
     "node_modules/dotenv": {
-      "version": "16.4.7",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
-      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
+      "version": "16.5.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
+      "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
@@ -658,67 +610,66 @@
       }
     },
     "node_modules/eventsource": {
-      "version": "3.0.5",
-      "resolved": "https://registry.npmjs.org/eventsource/-/eventsource-3.0.5.tgz",
-      "integrity": "sha512-LT/5J605bx5SNyE+ITBDiM3FxffBiq9un7Vx0EwMDM3vg8sWKx/tO2zC+LMqZ+smAM0F2hblaDZUVZF0te2pSw==",
+      "version": "3.0.6",
+      "resolved": "https://registry.npmjs.org/eventsource/-/eventsource-3.0.6.tgz",
+      "integrity": "sha512-l19WpE2m9hSuyP06+FbuUUf1G+R0SFLrtQfbRb9PRr+oimOfxQhgGCbVaXg5IvZyyTThJsxh6L/srkMiCeBPDA==",
       "license": "MIT",
       "dependencies": {
-        "eventsource-parser": "^3.0.0"
+        "eventsource-parser": "^3.0.1"
       },
       "engines": {
         "node": ">=18.0.0"
       }
     },
     "node_modules/eventsource-parser": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-3.0.0.tgz",
-      "integrity": "sha512-T1C0XCUimhxVQzW4zFipdx0SficT651NnkR0ZSH3yQwh+mFMdLfgjABVi4YtMTtaL4s168593DaoaRLMqryavA==",
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-3.0.1.tgz",
+      "integrity": "sha512-VARTJ9CYeuQYb0pZEPbzi740OWFgpHe7AYJ2WFZVnUDUQp5Dk2yJUgF36YsZ81cOyxT0QxmXD2EQpapAouzWVA==",
       "license": "MIT",
       "engines": {
         "node": ">=18.0.0"
       }
     },
     "node_modules/express": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/express/-/express-5.0.1.tgz",
-      "integrity": "sha512-ORF7g6qGnD+YtUG9yx4DFoqCShNMmUKiXuT5oWMHiOvt/4WFbHC6yCwQMTSBMno7AqntNCAzzcnnjowRkTL9eQ==",
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/express/-/express-5.1.0.tgz",
+      "integrity": "sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==",
       "license": "MIT",
       "dependencies": {
         "accepts": "^2.0.0",
-        "body-parser": "^2.0.1",
+        "body-parser": "^2.2.0",
         "content-disposition": "^1.0.0",
-        "content-type": "~1.0.4",
-        "cookie": "0.7.1",
+        "content-type": "^1.0.5",
+        "cookie": "^0.7.1",
         "cookie-signature": "^1.2.1",
-        "debug": "4.3.6",
-        "depd": "2.0.0",
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
-        "finalhandler": "^2.0.0",
-        "fresh": "2.0.0",
-        "http-errors": "2.0.0",
+        "debug": "^4.4.0",
+        "encodeurl": "^2.0.0",
+        "escape-html": "^1.0.3",
+        "etag": "^1.8.1",
+        "finalhandler": "^2.1.0",
+        "fresh": "^2.0.0",
+        "http-errors": "^2.0.0",
         "merge-descriptors": "^2.0.0",
-        "methods": "~1.1.2",
         "mime-types": "^3.0.0",
-        "on-finished": "2.4.1",
-        "once": "1.4.0",
-        "parseurl": "~1.3.3",
-        "proxy-addr": "~2.0.7",
-        "qs": "6.13.0",
-        "range-parser": "~1.2.1",
-        "router": "^2.0.0",
-        "safe-buffer": "5.2.1",
+        "on-finished": "^2.4.1",
+        "once": "^1.4.0",
+        "parseurl": "^1.3.3",
+        "proxy-addr": "^2.0.7",
+        "qs": "^6.14.0",
+        "range-parser": "^1.2.1",
+        "router": "^2.2.0",
         "send": "^1.1.0",
-        "serve-static": "^2.1.0",
-        "setprototypeof": "1.2.0",
-        "statuses": "2.0.1",
-        "type-is": "^2.0.0",
-        "utils-merge": "1.0.1",
-        "vary": "~1.1.2"
+        "serve-static": "^2.2.0",
+        "statuses": "^2.0.1",
+        "type-is": "^2.0.1",
+        "vary": "^1.1.2"
       },
       "engines": {
         "node": ">= 18"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
       }
     },
     "node_modules/express-rate-limit": {
@@ -768,29 +719,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/finalhandler/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/finalhandler/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
     "node_modules/fn.name": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
@@ -933,12 +861,12 @@
       }
     },
     "node_modules/iconv-lite": {
-      "version": "0.5.2",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.5.2.tgz",
-      "integrity": "sha512-kERHXvpSaB4aU3eANwidg79K8FlrN77m8G9V+0vOR3HYaRifrlwMEpT7ZBJqLSEIHnEgJTHcWK82wwLwwKwtag==",
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
+      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
       "license": "MIT",
       "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3"
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
       },
       "engines": {
         "node": ">=0.10.0"
@@ -1057,31 +985,22 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/methods": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
-      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
     "node_modules/mime-db": {
-      "version": "1.53.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.53.0.tgz",
-      "integrity": "sha512-oHlN/w+3MQ3rba9rqFr6V/ypF10LSkdwUysQL7GkXoTgIWeV+tcXGA852TBxH+gsh8UWoyhR1hKcoMJTuWflpg==",
+      "version": "1.54.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
+      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
       "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
     "node_modules/mime-types": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.0.tgz",
-      "integrity": "sha512-XqoSHeCGjVClAmoGFG3lVFqQFRIrTVw2OH3axRqAcfaw+gHWIfnASS92AV+Rl/mk0MupgZTRHQOjxY6YVnzK5w==",
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
+      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
       "license": "MIT",
       "dependencies": {
-        "mime-db": "^1.53.0"
+        "mime-db": "^1.54.0"
       },
       "engines": {
         "node": ">= 0.6"
@@ -1097,9 +1016,9 @@
       }
     },
     "node_modules/ms": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
-      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
       "license": "MIT"
     },
     "node_modules/nanoid": {
@@ -1238,9 +1157,9 @@
       "license": "ISC"
     },
     "node_modules/pkce-challenge": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/pkce-challenge/-/pkce-challenge-4.1.0.tgz",
-      "integrity": "sha512-ZBmhE1C9LcPoH9XZSdwiPtbPHZROwAnMy+kIFQVrnMCxY4Cudlz3gBOpzilgc0jOgRaiT3sIWfpMomW2ar2orQ==",
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/pkce-challenge/-/pkce-challenge-5.0.0.tgz",
+      "integrity": "sha512-ueGLflrrnvwB3xuo/uGob5pd5FN7l0MsLf0Z87o/UQmRtwjvfylfc9MurIxRAWywCYTgrvpXBcqjV4OfCYGCIQ==",
       "license": "MIT",
       "engines": {
         "node": ">=16.20.0"
@@ -1288,12 +1207,12 @@
       }
     },
     "node_modules/qs": {
-      "version": "6.13.0",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
-      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
+      "version": "6.14.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
+      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
       "license": "BSD-3-Clause",
       "dependencies": {
-        "side-channel": "^1.0.6"
+        "side-channel": "^1.1.0"
       },
       "engines": {
         "node": ">=0.6"
@@ -1326,18 +1245,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/raw-body/node_modules/iconv-lite": {
-      "version": "0.6.3",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
-      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
-      "license": "MIT",
-      "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3.0.0"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/readable-stream": {
       "version": "3.6.2",
       "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
@@ -1353,11 +1260,13 @@
       }
     },
     "node_modules/router": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/router/-/router-2.1.0.tgz",
-      "integrity": "sha512-/m/NSLxeYEgWNtyC+WtNHCF7jbGxOibVWKnn+1Psff4dJGOfoXP+MuC/f2CwSmyiHdOIzYnYFp4W6GxWfekaLA==",
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/router/-/router-2.2.0.tgz",
+      "integrity": "sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==",
       "license": "MIT",
       "dependencies": {
+        "debug": "^4.4.0",
+        "depd": "^2.0.0",
         "is-promise": "^4.0.0",
         "parseurl": "^1.3.3",
         "path-to-regexp": "^8.0.0"
@@ -1402,9 +1311,9 @@
       "license": "MIT"
     },
     "node_modules/sanitize-html": {
-      "version": "2.15.0",
-      "resolved": "https://registry.npmjs.org/sanitize-html/-/sanitize-html-2.15.0.tgz",
-      "integrity": "sha512-wIjst57vJGpLyBP8ioUbg6ThwJie5SuSIjHxJg53v5Fg+kUK+AXlb7bK3RNXpp315MvwM+0OBGCV6h5pPHsVhA==",
+      "version": "2.16.0",
+      "resolved": "https://registry.npmjs.org/sanitize-html/-/sanitize-html-2.16.0.tgz",
+      "integrity": "sha512-0s4caLuHHaZFVxFTG74oW91+j6vW7gKbGD6CD2+miP73CE6z6YtOBN0ArtLd2UGyi4IC7K47v3ENUbQX4jV3Mg==",
       "license": "MIT",
       "dependencies": {
         "deepmerge": "^4.2.2",
@@ -1416,19 +1325,18 @@
       }
     },
     "node_modules/send": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/send/-/send-1.1.0.tgz",
-      "integrity": "sha512-v67WcEouB5GxbTWL/4NeToqcZiAWEq90N888fczVArY8A79J0L4FD7vj5hm3eUMua5EpoQ59wa/oovY6TLvRUA==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
+      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
       "license": "MIT",
       "dependencies": {
         "debug": "^4.3.5",
-        "destroy": "^1.2.0",
         "encodeurl": "^2.0.0",
         "escape-html": "^1.0.3",
         "etag": "^1.8.1",
-        "fresh": "^0.5.2",
+        "fresh": "^2.0.0",
         "http-errors": "^2.0.0",
-        "mime-types": "^2.1.35",
+        "mime-types": "^3.0.1",
         "ms": "^2.1.3",
         "on-finished": "^2.4.1",
         "range-parser": "^1.2.1",
@@ -1438,52 +1346,16 @@
         "node": ">= 18"
       }
     },
-    "node_modules/send/node_modules/fresh": {
-      "version": "0.5.2",
-      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
-      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/send/node_modules/mime-db": {
-      "version": "1.52.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
-      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/send/node_modules/mime-types": {
-      "version": "2.1.35",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
-      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
-      "license": "MIT",
-      "dependencies": {
-        "mime-db": "1.52.0"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/send/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
     "node_modules/serve-static": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.1.0.tgz",
-      "integrity": "sha512-A3We5UfEjG8Z7VkDv6uItWw6HY2bBSBJT1KtVESn6EOoOr2jAxNhxWCLY3jDE2WcuHXByWju74ck3ZgLwL8xmA==",
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.2.0.tgz",
+      "integrity": "sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==",
       "license": "MIT",
       "dependencies": {
         "encodeurl": "^2.0.0",
         "escape-html": "^1.0.3",
         "parseurl": "^1.3.3",
-        "send": "^1.0.0"
+        "send": "^1.2.0"
       },
       "engines": {
         "node": ">= 18"
@@ -1701,9 +1573,9 @@
       }
     },
     "node_modules/type-is": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.0.tgz",
-      "integrity": "sha512-gd0sGezQYCbWSbkZr75mln4YBidWUN60+devscpLF5mtRDUpiaTvKpBNrdaCvel1NdR2k6vclXybU5fBd2i+nw==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz",
+      "integrity": "sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==",
       "license": "MIT",
       "dependencies": {
         "content-type": "^1.0.5",
@@ -1715,9 +1587,9 @@
       }
     },
     "node_modules/typescript": {
-      "version": "5.8.2",
-      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.2.tgz",
-      "integrity": "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==",
+      "version": "5.8.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
+      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
       "license": "Apache-2.0",
       "bin": {
         "tsc": "bin/tsc",
@@ -1728,9 +1600,9 @@
       }
     },
     "node_modules/undici-types": {
-      "version": "7.5.0",
-      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.5.0.tgz",
-      "integrity": "sha512-CxNFga24pkqrtk9aO4jV78tWXLZhVVU9J2/EAhBGwqJ1+tsLydMI2Vaq7wj3ba/SZL7BL8aq5rflf75DhbgkhA==",
+      "version": "7.8.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
+      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
       "license": "MIT"
     },
     "node_modules/unpipe": {
@@ -1748,15 +1620,6 @@
       "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
       "license": "MIT"
     },
-    "node_modules/utils-merge": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
-      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4.0"
-      }
-    },
     "node_modules/v8-compile-cache-lib": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
@@ -1871,18 +1734,18 @@
       }
     },
     "node_modules/zod": {
-      "version": "3.24.2",
-      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.2.tgz",
-      "integrity": "sha512-lY7CDW43ECgW9u1TcT3IoXHflywfVqDYze4waEz812jR/bZ8FHDsl7pFQoSZTz5N+2NqRXs8GBwnAwo3ZNxqhQ==",
+      "version": "3.24.3",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.3.tgz",
+      "integrity": "sha512-HhY1oqzWCQWuUqvBFnsyrtZRhyPeR7SUGv+C4+MsisMuVfSPx8HpwWqH8tRahSlt6M3PiFAcoeFhZAqIXTxoSg==",
       "license": "MIT",
       "funding": {
         "url": "https://github.com/sponsors/colinhacks"
       }
     },
     "node_modules/zod-to-json-schema": {
-      "version": "3.24.4",
-      "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.4.tgz",
-      "integrity": "sha512-0uNlcvgabyrni9Ag8Vghj21drk7+7tp7VTwwR7KxxXXc/3pbXz2PHlDgj3cICahgF1kHm4dExBFj7BXrZJXzig==",
+      "version": "3.24.5",
+      "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.5.tgz",
+      "integrity": "sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g==",
       "license": "ISC",
       "peerDependencies": {
         "zod": "^3.24.1"
diff --git a/package.json b/package.json
index 7a16358..12c5176 100644
--- a/package.json
+++ b/package.json
@@ -16,17 +16,17 @@
     "watch": "tail -f logs/combined.log"
   },
   "dependencies": {
-    "@modelcontextprotocol/sdk": "^1.8.0",
-    "@types/node": "^22.13.14",
-    "@types/sanitize-html": "^2.13.0",
-    "@types/validator": "^13.12.3",
+    "@modelcontextprotocol/sdk": "^1.10.2",
+    "@types/node": "^22.14.1",
+    "@types/sanitize-html": "^2.15.0",
+    "@types/validator": "^13.15.0",
     "@types/xss-filters": "^1.2.0",
-    "dotenv": "^16.4.7",
+    "dotenv": "^16.5.0",
     "path-normalize": "^6.0.13",
-    "sanitize-html": "^2.15.0",
+    "sanitize-html": "^2.16.0",
     "ts-node": "^10.9.2",
-    "typescript": "^5.8.2",
-    "undici-types": "^7.5.0",
+    "typescript": "^5.8.3",
+    "undici-types": "^7.8.0",
     "validator": "^13.15.0",
     "winston": "^3.17.0",
     "winston-daily-rotate-file": "^5.0.0",
diff --git a/src/config/index.ts b/src/config/index.ts
index 803f6a5..2b54e32 100644
--- a/src/config/index.ts
+++ b/src/config/index.ts
@@ -113,7 +113,7 @@ export const config = {
 configLogger.info('Configuration loaded', {
   environment: config.environment,
   logLevel: config.logLevel,
-  server: config.server,
+  server: { host: config.server.host }, // Log only host, not port
   ntfy: {
     baseUrl: config.ntfy.baseUrl,
     defaultTopic: config.ntfy.defaultTopic || '(not set)',
diff --git a/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts b/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts
index 007dc17..8474ccb 100644
--- a/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts
+++ b/src/mcp-server/resources/ntfyResource/getNtfyTopic.ts
@@ -11,7 +11,8 @@ const resourceLogger = logger.createChildLogger({
   service: 'NtfyResource'
 });
 
-export const getNtfyTopic = async (uri: URL): Promise<NtfyResourceResponse> => {
+// Updated signature to accept topic explicitly
+export const getNtfyTopic = async (topic: string, uri: URL): Promise<NtfyResourceResponse> => { 
   // Create a request context with unique ID
   const requestContext = createRequestContext({ 
     operation: 'getNtfyTopic',
@@ -19,8 +20,8 @@ export const getNtfyTopic = async (uri: URL): Promise<NtfyResourceResponse> => {
   });
   const requestId = requestContext.requestId;
 
-  // Extract the topic from the URI pathname
-  const topic = uri.hostname || "";
+  // Topic is now passed as an argument, no need to extract from hostname
+  // const topic = uri.hostname || ""; // Removed
 
   resourceLogger.info("Ntfy resource request received", { 
     requestId,
@@ -31,28 +32,43 @@ export const getNtfyTopic = async (uri: URL): Promise<NtfyResourceResponse> => {
   return ErrorHandler.tryCatch(async () => {
     // Get the default topic from configuration
     const ntfyConfig = config.ntfy;
-    let defaultTopic = ntfyConfig.defaultTopic;
-    
-    if (!defaultTopic) {
-      resourceLogger.warn("Default ntfy topic is not configured, using fallback value", { 
+    const defaultTopic = ntfyConfig.defaultTopic;
+
+    // Handle case where 'default' is requested but not configured
+    if (topic === "default" && !defaultTopic) {
+      resourceLogger.error("Requested default ntfy topic, but none is configured.", {
         requestId,
-        uri: uri.href 
-      });
-      // Provide a fallback value instead of failing
-      defaultTopic = "ATLAS"; 
+        uri: uri.href
+       });
+       throw new McpError(
+         BaseErrorCode.VALIDATION_ERROR, // Corrected error code
+         "Default ntfy topic requested via ntfy://default, but no default topic is configured in the environment variables.",
+         { requestId, uri: uri.toString() }
+      );
     }
+    
+    // Determine the actual topic to fetch messages for
+    const topicToFetch = topic === "default" ? defaultTopic : topic;
 
     // Get recent messages asynchronously for this topic
-    let recentMessages = [];
+    let recentMessages: any[] = []; // Define type for recentMessages
     try {
-      // Use a different topic for actual fetching based on whether this is default or not
-      const topicToFetch = topic === "default" ? defaultTopic : topic;
-      
-      // Attempt to fetch the 10 most recent messages
-      const response = await fetch(`${config.ntfy.baseUrl || 'https://ntfy.sh'}/${topicToFetch}/json?poll=1&since=30d`, {
+      // Ensure topicToFetch is valid before fetching
+      if (!topicToFetch) {
+         // This case should theoretically be caught by the check above, but adding for safety
+         throw new Error("Cannot fetch messages for an empty topic.");
+      }
+
+      // Attempt to fetch the 10 most recent messages - removed poll=1
+      const fetchUrl = `${config.ntfy.baseUrl || 'https://ntfy.sh'}/${topicToFetch}/json?since=30d`;
+      resourceLogger.debug("Fetching recent messages", { requestId, url: fetchUrl });
+
+      const response = await fetch(fetchUrl, {
         method: 'GET',
         headers: {
-          'Accept': 'application/json'
+          'Accept': 'application/json',
+          // Add API key header if configured
+          ...(config.ntfy.apiKey && { 'Authorization': `Bearer ${config.ntfy.apiKey}` })
         }
       });
       
@@ -62,8 +78,17 @@ export const getNtfyTopic = async (uri: URL): Promise<NtfyResourceResponse> => {
         const lines = text.split('\n').filter(line => line.trim());
         
         // Parse each line as a JSON object and add to recent messages
-        recentMessages = lines.map(line => JSON.parse(line))
-          .filter(msg => msg.event === 'message')
+        // Ensure messages have an 'id' and 'time' for potential sorting/filtering if needed later
+        recentMessages = lines.map(line => {
+            try {
+              return JSON.parse(line);
+            } catch (parseError) {
+              resourceLogger.warn("Failed to parse message line from ntfy stream", { requestId, line, error: parseError instanceof Error ? parseError.message : String(parseError) });
+              return null; // Skip invalid lines
+            }
+          })
+          .filter(msg => msg && msg.event === 'message' && msg.id && msg.time) // Ensure it's a valid message event
+          .sort((a, b) => b.time - a.time) // Sort by time descending (most recent first)
           .slice(0, 10); // Keep only the 10 most recent
         
         resourceLogger.info(`Retrieved ${recentMessages.length} recent messages`, {
@@ -80,17 +105,18 @@ export const getNtfyTopic = async (uri: URL): Promise<NtfyResourceResponse> => {
       });
     }
     
-    // Handle the "default" topic case specially
+    // Prepare response data based on whether 'default' was the requested topic
     const responseData = topic === "default" ? 
       {
-        defaultTopic,
+        requestedTopic: "default", // Clarify what was requested
+        resolvedTopic: defaultTopic, // Show the resolved topic
         timestamp: new Date().toISOString(),
         requestUri: uri.href,
         requestId,
-        recentMessages: recentMessages.length > 0 ? recentMessages : undefined
+        recentMessages: recentMessages.length > 0 ? recentMessages : undefined // Keep undefined if empty
       } : 
       {
-        topic,
+        topic: topicToFetch, // Use the actual topic fetched
         timestamp: new Date().toISOString(),
         requestUri: uri.href,
         requestId,
diff --git a/src/mcp-server/resources/ntfyResource/index.ts b/src/mcp-server/resources/ntfyResource/index.ts
index 1daef43..5dcfdc5 100644
--- a/src/mcp-server/resources/ntfyResource/index.ts
+++ b/src/mcp-server/resources/ntfyResource/index.ts
@@ -1,6 +1,5 @@
 import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";
 import { BaseErrorCode, McpError } from '../../../types-global/errors.js';
-import { ErrorHandler } from '../../../utils/errorHandler.js';
 import { ChildLogger } from '../../../utils/logger.js';
 import { registerResource } from '../../utils/registrationHelper.js';
 import { getNtfyTopic } from './getNtfyTopic.js';
@@ -65,30 +64,36 @@ export const registerNtfyResource = async (server: McpServer): Promise<void> =>
         
         // Resource handler
         async (uri, params) => {
-          // Extract the topic from the URI
-          const topic = params.topic;
+          // Extract the topic from the URI parameters provided by the SDK
+          const topicParam = params.topic;
           
-          resourceLogger.info(`Processing ntfy resource request for topic: ${topic}`, {
-            topic,
+          resourceLogger.info(`Processing ntfy resource request for topic parameter: ${topicParam}`, {
+            topicParam,
             href: uri.href
           });
           
-          // Check if the topic is valid
-          if (!topic) {
-            resourceLogger.error(`Missing topic in ntfy resource uri: ${uri.href}`, {
+          // Check if the topic parameter is valid and is a string
+          if (typeof topicParam !== 'string' || !topicParam) {
+            resourceLogger.error(`Invalid or missing topic parameter in ntfy resource uri: ${uri.href}`, {
               href: uri.href,
-              protocol: uri.protocol
+              params: params,
+              topicType: typeof topicParam
             });
             
+            // Use VALIDATION_ERROR as it's an issue with the input derived from the URI
             throw new McpError(
-              BaseErrorCode.NOT_FOUND,
-              `Resource not found: ${uri.href}`,
-              { uri: uri.href }
+              BaseErrorCode.VALIDATION_ERROR, 
+              `Invalid resource URI: Topic parameter must be a non-empty string in ${uri.href}`,
+              { uri: uri.href, params: params }
             );
           }
+
+          // Now we know topicParam is a string
+          const topic: string = topicParam;
           
           // Process the request using our dedicated handler
-          return await getNtfyTopic(uri);
+          // Pass the validated topic string and the original URI to the handler
+          return await getNtfyTopic(topic, uri);
         }
       );
       
diff --git a/src/mcp-server/resources/ntfyResource/types.ts b/src/mcp-server/resources/ntfyResource/types.ts
index d15765f..a1a298f 100644
--- a/src/mcp-server/resources/ntfyResource/types.ts
+++ b/src/mcp-server/resources/ntfyResource/types.ts
@@ -25,10 +25,47 @@ export interface NtfyResourceResponse {
 }
 
 /**
- * Data structure for the ntfy response
+ * Represents a single message retrieved from the ntfy topic history.
+ * Based on the structure observed from ntfy.sh/topic/json.
  */
-export interface NtfyData {
-  defaultTopic: string;         // The default ntfy topic
-  timestamp: string;            // When the request was processed
-  requestUri: string;           // The original request URI
+export interface NtfyMessage {
+  id: string;
+  time: number; // Unix timestamp
+  event: 'message';
+  topic: string;
+  message: string;
+  title?: string;
+  tags?: string[];
+  priority?: number;
+  click?: string;
+  actions?: any[]; // Define more strictly if needed
+  attachment?: {
+    name: string;
+    type?: string;
+    size?: number;
+    expires?: number;
+    url: string;
+  };
+  // Other potential fields depending on ntfy version/features
+  [key: string]: any; 
 }
+
+/**
+ * Data structure for the ntfy resource response content.
+ * This reflects the actual JSON structure returned within the 'text' field 
+ * of the McpContent object.
+ */
+export type NtfyResourceData = {
+  timestamp: string;            // ISO timestamp when the request was processed
+  requestUri: string;           // The original request URI (e.g., ntfy://default)
+  requestId: string;            // Unique ID for the request context
+  recentMessages?: NtfyMessage[]; // Optional array of recent messages (up to 10)
+} & (
+  | { 
+      requestedTopic: "default"; // Indicates 'default' was requested
+      resolvedTopic: string;     // The actual default topic from config
+    }
+  | { 
+      topic: string;             // The specific topic requested and used
+    }
+);
diff --git a/src/mcp-server/server.ts b/src/mcp-server/server.ts
index 5806221..669e0fe 100644
--- a/src/mcp-server/server.ts
+++ b/src/mcp-server/server.ts
@@ -107,11 +107,11 @@ export interface ServerState {
   failedRegistrations: Array<{
     type: 'tool' | 'resource';
     name: string;
-    error: any;
-    attempts: number;
+    error: any; // Ensure error is always present
+    attempts: number; // Track attempts if retry logic is added
   }>;
-  requiredTools: Set<string>;
-  requiredResources: Set<string>;
+  requiredTools: Set<string>; // Tools essential for basic functionality
+  requiredResources: Set<string>; // Resources essential for basic functionality
 }
 
 /**
@@ -143,8 +143,8 @@ export const createMcpServer = async () => {
   // Initialize server variable outside try/catch
   let server: McpServer | undefined;
   
-  // Maximum registration retry attempts
-  const MAX_REGISTRATION_RETRIES = 3;
+  // Maximum registration retry attempts (currently not implemented, but placeholder)
+  const MAX_REGISTRATION_RETRIES = 1; 
   
   // Create a unique server instance ID
   const serverId = idGenerator.generateRandomString(8);
@@ -218,7 +218,7 @@ export const createMcpServer = async () => {
         success: boolean;
         type: 'tool' | 'resource';
         name: string;
-        error?: any;
+        error?: any; // Error is optional here as success=true means no error
       };
       
       const registerComponent = async (
@@ -245,10 +245,10 @@ export const createMcpServer = async () => {
           }
           
           serverLogger.debug(`Successfully registered ${type}: ${name}`);
-          return { success: true, type, name };
+          return { success: true, type, name }; // No error on success
         } catch (error) {
           serverLogger.error(`Failed to register ${type}: ${name}`, { error });
-          return { success: false, type, name, error };
+          return { success: false, type, name, error }; // Error included on failure
         }
       };
       
@@ -262,27 +262,60 @@ export const createMcpServer = async () => {
       const registrationResults = await Promise.allSettled(registrationPromises);
       
       // Process the results to find failed registrations
-      const failedRegistrations: Array<RegistrationResult & { attempts?: number }> = [];
-      
+      let hasRequiredFailure = false;
       registrationResults.forEach(result => {
         if (result.status === 'rejected') {
-          failedRegistrations.push({ 
-            success: false, 
+          // This indicates an unexpected error during the registerComponent wrapper itself
+          const failure = { 
             type: 'unknown' as 'tool' | 'resource', 
             name: 'unknown', 
-            error: result.reason 
-          });
+            error: result.reason ?? new Error('Unknown registration wrapper error'), // Ensure error exists
+            attempts: 1 // Assuming 1 attempt for now
+          };
+          serverState.failedRegistrations.push(failure);
+          serverLogger.error("Unexpected error during component registration wrapper", { failure });
+          // Assume any unknown failure could be critical
+          hasRequiredFailure = true; 
         } else if (!result.value.success) {
-          failedRegistrations.push(result.value);
+          // This indicates a failure within the specific registerFn (result.value.error should exist)
+          const failure = { 
+            type: result.value.type,
+            name: result.value.name,
+            // Provide a fallback error just in case, though logic implies error exists
+            error: result.value.error ?? new Error(`Unknown error registering ${result.value.type} ${result.value.name}`), 
+            attempts: 1 // Assuming 1 attempt for now
+          };
+          serverState.failedRegistrations.push(failure);
+          serverLogger.warn(`Registration failed for ${failure.type}: ${failure.name}`, { error: failure.error });
+          
+          // Check if the failed component was required
+          if ((failure.type === 'tool' && serverState.requiredTools.has(failure.name)) ||
+              (failure.type === 'resource' && serverState.requiredResources.has(failure.name))) {
+            serverLogger.error(`Required ${failure.type} '${failure.name}' failed to register. Server will be degraded.`, { error: failure.error });
+            hasRequiredFailure = true;
+          }
         }
       });
       
-      // Process failed registrations
-      if (failedRegistrations.length > 0) {
-        serverLogger.warn(`${failedRegistrations.length} registrations failed initially`, {
-          failedComponents: failedRegistrations.map(f => `${f.type}:${f.name}`) 
-        });
+      // Update server status based on registration results
+      const previousStatus = serverState.status;
+      if (hasRequiredFailure) {
+        serverState.status = 'degraded';
+      } else {
+        serverState.status = 'running'; // Move to running only if all required components registered
       }
+      
+      // Emit state change if status updated
+      if (serverState.status !== previousStatus) {
+        serverEvents.emitStateChange(previousStatus, serverState.status);
+      }
+
+      serverLogger.info(`Component registration complete. Status: ${serverState.status}`, {
+        registeredTools: Array.from(serverState.registeredTools),
+        registeredResources: Array.from(serverState.registeredResources),
+        failedCount: serverState.failedRegistrations.length,
+        failedComponents: serverState.failedRegistrations.map(f => `${f.type}:${f.name}`)
+      });
 
       // Add debug logs to diagnose the connection issue
       serverLogger.debug("About to connect to stdio transport");
@@ -292,9 +325,19 @@ export const createMcpServer = async () => {
         const transport = new StdioServerTransport();
         serverLogger.debug("Created StdioServerTransport instance");
         
-        // Set event handlers - using type assertion to avoid TS errors
+        // Set event handlers
+        // Using 'as any' for onerror as the type might not be directly exposed or stable in the SDK.
+        // This bypasses TypeScript checks but allows attaching the handler.
+        // TODO: Revisit if future SDK versions provide a type-safe way to attach error handlers.
         (server as any).onerror = (err: Error) => {
-          serverLogger.error(`Server error: ${err.message}`, { stack: err.stack });
+          serverLogger.error(`Server transport error: ${err.message}`, { stack: err.stack });
+          // Optionally update server state on transport errors
+          if (serverState.status !== 'error' && serverState.status !== 'shutting_down') {
+             const oldStatus = serverState.status;
+             serverState.status = 'error';
+             serverEvents.emitStateChange(oldStatus, 'error');
+          }
+          serverState.errors.push({ timestamp: new Date(), message: err.message, code: 'TRANSPORT_ERROR' });
         };
         
         // Skip setting onrequest since we don't have access to the type
@@ -306,7 +349,11 @@ export const createMcpServer = async () => {
           error: error instanceof Error ? error.message : String(error),
           stack: error instanceof Error ? error.stack : undefined
         });
-        throw error;
+        // Update state on connection failure
+        const oldStatus = serverState.status;
+        serverState.status = 'error';
+        serverEvents.emitStateChange(oldStatus, 'error');
+        throw error; // Re-throw connection error
       }
       
       serverLogger.info("MCP server initialized and connected");
diff --git a/src/mcp-server/tools/ntfyTool/ntfyMessage.ts b/src/mcp-server/tools/ntfyTool/ntfyMessage.ts
index 2c87974..a353801 100644
--- a/src/mcp-server/tools/ntfyTool/ntfyMessage.ts
+++ b/src/mcp-server/tools/ntfyTool/ntfyMessage.ts
@@ -25,9 +25,10 @@ const globalRateLimiter = new RateLimiter({
 
 // Map to cache per-topic rate limiters
 const topicRateLimiters = new Map<string, RateLimiter>();
+const MAX_CACHED_TOPIC_LIMITERS = 1000; // Limit the cache size
 
 /**
- * Gets or creates a rate limiter for a specific topic
+ * Gets or creates a rate limiter for a specific topic, with cache cleanup.
  * 
  * @param topic - The ntfy topic
  * @returns Rate limiter instance for the topic
@@ -36,6 +37,19 @@ function getTopicRateLimiter(topic: string): RateLimiter {
   const normalizedTopic = topic.toLowerCase().trim();
   
   if (!topicRateLimiters.has(normalizedTopic)) {
+    // Check cache size before adding a new limiter
+    if (topicRateLimiters.size >= MAX_CACHED_TOPIC_LIMITERS) {
+      // Remove the oldest entry (first key in insertion order)
+      const oldestTopic = topicRateLimiters.keys().next().value;
+      if (oldestTopic) {
+        topicRateLimiters.delete(oldestTopic);
+        ntfyToolLogger.debug(`Removed oldest topic rate limiter due to cache size limit: ${oldestTopic}`, {
+          cacheSize: topicRateLimiters.size,
+          limit: MAX_CACHED_TOPIC_LIMITERS
+        });
+      }
+    }
+
     // Make per-topic limit more restrictive than global
     const perTopicLimit = Math.min(50, Math.floor(rateLimit.maxRequests / 2));
     
@@ -44,6 +58,9 @@ function getTopicRateLimiter(topic: string): RateLimiter {
       maxRequests: perTopicLimit,
       errorMessage: `Rate limit exceeded for topic '${normalizedTopic}'. Please try again in {waitTime} seconds.`,
     }));
+    ntfyToolLogger.debug(`Created new rate limiter for topic: ${normalizedTopic}`, {
+      cacheSize: topicRateLimiters.size
+    });
   }
   
   return topicRateLimiters.get(normalizedTopic)!;
@@ -169,7 +186,9 @@ export const processNtfyMessage = async (
           action: sanitizeInput.string(action.action),
           url: action.url ? sanitizeInput.url(action.url) : undefined,
           method: action.method ? sanitizeInput.string(action.method) : undefined,
-          headers: action.headers,
+          // TODO: Review if action.headers need sanitization/validation based on ntfy processing.
+          // Currently passed through as-is.
+          headers: action.headers, 
           body: action.body ? sanitizeInput.string(action.body) : undefined,
           clear: action.clear
         })),
diff --git a/src/types-global/tool.ts b/src/types-global/tool.ts
index 36d2dd9..01b540d 100644
--- a/src/types-global/tool.ts
+++ b/src/types-global/tool.ts
@@ -67,87 +67,4 @@ export function createToolMetadata(metadata: ToolMetadata): ToolMetadata {
   return metadata;
 }
 
-/**
- * Register a tool with the MCP server
- * 
- * This is a compatibility wrapper for the McpServer.tool() method.
- * In the current implementation, the tool registration is handled by the McpServer class,
- * so this function primarily exists to provide a consistent API.
- * 
- * @param server MCP server instance
- * @param name Tool name
- * @param description Tool description
- * @param inputSchema Schema for validating input
- * @param handler Handler function for the tool
- * @param metadata Optional tool metadata
- */
-export function registerTool(
-  server: any,  // Using any to avoid type conflicts
-  name: string, 
-  description: string, 
-  inputSchema: Record<string, z.ZodType<any>>, 
-  handler: (input: unknown, context: OperationContext) => Promise<unknown>,
-  metadata?: ToolMetadata  
-): Promise<void> {
-  return ErrorHandler.tryCatch<void>(
-    async () => {
-      // Log the registration attempt
-      toolLogger.info(`Registering tool: ${name}`, {
-        toolName: name,
-        schemaKeys: Object.keys(inputSchema),
-        hasMetadata: Boolean(metadata),
-        hasExamples: Boolean(metadata?.examples?.length)
-      });
-      
-      // Some basic validation
-      if (!name) {
-        throw new Error('Tool name is required');
-      }
-      
-      if (!inputSchema) {
-        throw new Error('Input schema is required');
-      }
-      
-      if (!handler || typeof handler !== 'function') {
-        throw new Error('Handler must be a function');
-      }
-
-      // Convert schema to a more standardized format if needed
-      const schemaDescription = Object.entries(inputSchema).map(([key, schema]) => {
-        const description = schema.description;
-        const isRequired = !schema.isOptional?.();
-        return `${key}${isRequired ? ' (required)' : ''}: ${description || 'No description'}`;
-      }).join('\n');
-
-      toolLogger.debug(`Tool ${name} schema:`, {
-        toolName: name,
-        schema: schemaDescription
-      });
-
-      // Actually register the tool with the server
-      // Check if it's an McpServer instance with tool() method
-      if (server.tool && typeof server.tool === 'function') {
-        // Use the McpServer.tool() method directly
-        toolLogger.debug('Using McpServer.tool() method');
-        server.tool(name, inputSchema, handler, {
-          description,
-          examples: metadata?.examples
-        });
-      } else {
-        // For other server types or for testing, log a warning
-        toolLogger.warn(`Unable to register tool ${name} with server - missing tool() method`, {
-          toolName: name
-        });
-      }
-
-      // Log successful registration
-      toolLogger.info(`Tool ${name} registered successfully`);
-    },
-    {
-      context: { toolName: name },
-      operation: "registering tool",
-      errorMapper: (error) => new Error(`Failed to register tool ${name}: ${error instanceof Error ? error.message : String(error)}`),
-      rethrow: true
-    }
-  );
-}
\ No newline at end of file
+// Removed unused registerTool function (registration handled elsewhere)
diff --git a/src/utils/logger.ts b/src/utils/logger.ts
index 565caf9..7be9145 100644
--- a/src/utils/logger.ts
+++ b/src/utils/logger.ts
@@ -36,8 +36,17 @@ class Logger {
     const commonFormat = winston.format.combine(
       winston.format.timestamp(),
       winston.format.errors({ stack: true }),
+      // The 'context' object passed to logger methods (e.g., logger.info(message, context))
+      // will be available here in the 'info' object passed to the printf function.
+      // Winston automatically merges the metadata passed during logger creation 
+      // with the metadata passed at the call site if you use logger.child().
+      // However, since we are implementing a custom child logger wrapper, 
+      // we need to handle the merging manually.
       winston.format.printf(({ timestamp, level, message, context, stack }) => {
-        const contextStr = context ? `\n  Context: ${JSON.stringify(context, null, 2)}` : "";
+        // Ensure context is an object before stringifying
+        const contextStr = (context && typeof context === 'object' && Object.keys(context).length > 0) 
+          ? `\n  Context: ${JSON.stringify(context, null, 2)}` 
+          : "";
         const stackStr = stack ? `\n  Stack: ${stack}` : "";
         return `[${timestamp}] ${level}: ${message}${contextStr}${stackStr}`;
       })
@@ -45,12 +54,13 @@ class Logger {
 
     this.logger = winston.createLogger({
       level: logLevel,
-      format: winston.format.json(),
+      // Use json format for structured logging internally, printf for files
+      format: winston.format.json(), 
       transports: [
         // Combined log file for all levels
         new winston.transports.File({
           filename: path.join(logsDir, 'combined.log'),
-          format: commonFormat
+          format: commonFormat // Apply the custom format here
         }),
         // Separate log files for each level
         new winston.transports.File({
@@ -75,6 +85,24 @@ class Logger {
         })
       ]
     });
+
+    // Add console transport only if not in production
+    if (process.env.NODE_ENV !== 'production') {
+      this.logger.add(new winston.transports.Console({
+        format: winston.format.combine(
+          winston.format.colorize(),
+          winston.format.simple(), // Use simple format for console readability
+          winston.format.printf(({ level, message, timestamp, context, stack }) => {
+            const contextStr = (context && typeof context === 'object' && Object.keys(context).length > 0) 
+              ? ` ${JSON.stringify(context)}` 
+              : "";
+            const stackStr = stack ? `\n${stack}` : "";
+            // Simple console format
+            return `${level}: ${message}${contextStr}${stackStr}`; 
+          })
+        )
+      }));
+    }
   }
 
   public static getInstance(): Logger {
@@ -84,22 +112,35 @@ class Logger {
     return Logger.instance;
   }
 
+  // Base log methods now accept the context directly
   public debug(message: string, context?: Record<string, unknown>) {
-    this.logger.debug(message, { context });
+    this.logger.debug(message, context);
   }
 
   public info(message: string, context?: Record<string, unknown>) {
-    this.logger.info(message, { context });
+    this.logger.info(message, context);
   }
 
   public warn(message: string, context?: Record<string, unknown>) {
-    this.logger.warn(message, { context });
+    this.logger.warn(message, context);
   }
 
   public error(message: string, context?: Record<string, unknown>) {
-    this.logger.error(message, { context });
+    // Ensure error context includes stack if available
+    const errorContext = context || {};
+    if (errorContext.error instanceof Error && !errorContext.stack) {
+      errorContext.stack = errorContext.error.stack;
+    }
+    this.logger.error(message, errorContext);
   }
 
+  /**
+   * Creates a child logger that automatically includes the provided metadata 
+   * in the context object of every log message.
+   * 
+   * @param metadata - Static metadata to include with every log from this child.
+   * @returns A ChildLogger instance.
+   */
   public createChildLogger(metadata: { 
     module: string; 
     service?: string;
@@ -111,25 +152,34 @@ class Logger {
     subscriptionTime?: string;
     environment?: string;
     serverId?: string;
-    [key: string]: any; // Allow any additional properties for backward compatibility
-  }): {
-    debug: (message: string, context?: Record<string, unknown>) => void;
-    info: (message: string, context?: Record<string, unknown>) => void;
-    warn: (message: string, context?: Record<string, unknown>) => void;
-    error: (message: string, context?: Record<string, unknown>) => void;
-  } {
+    [key: string]: any; // Allow additional properties
+  }): ChildLogger {
+    // Filter out undefined values from metadata once
+    const staticMetadata = Object.fromEntries(
+      Object.entries(metadata).filter(([_, v]) => v !== undefined)
+    );
+
     return {
       debug: (message: string, context?: Record<string, unknown>) => {
-        this.debug(`[${metadata.module}] ${message}`, context);
+        // Merge static metadata with call-site context
+        const mergedContext = { ...staticMetadata, ...context };
+        this.debug(message, mergedContext);
       },
       info: (message: string, context?: Record<string, unknown>) => {
-        this.info(`[${metadata.module}] ${message}`, context);
+        const mergedContext = { ...staticMetadata, ...context };
+        this.info(message, mergedContext);
       },
       warn: (message: string, context?: Record<string, unknown>) => {
-        this.warn(`[${metadata.module}] ${message}`, context);
+        const mergedContext = { ...staticMetadata, ...context };
+        this.warn(message, mergedContext);
       },
       error: (message: string, context?: Record<string, unknown>) => {
-        this.error(`[${metadata.module}] ${message}`, context);
+        const mergedContext = { ...staticMetadata, ...context };
+        // Ensure error context includes stack if available
+        if (mergedContext.error instanceof Error && !mergedContext.stack) {
+          mergedContext.stack = mergedContext.error.stack;
+        }
+        this.error(message, mergedContext);
       }
     };
   }
